cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
cbind(hey$par, beta)
beta = rnorm(1)
x = matrix(rnorm(100000), ncol =1)
lambda = x %*% beta
time = rexp(nrow(x)/1, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,1), like)
beta = rnorm(1)
x = matrix(rnorm(100000), ncol =1)
lambda = x %*% beta
time = rexp(nrow(x)/1, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,1), like)
hdy
hey
beta
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rnorm(2)
x = matrix(rnorm(100000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rnorm(2)
x = matrix(rnorm(10000), ncol = 2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
head(result)
plot(result[,1], result[,3])
qqplot(result[,1], result[,3])
abline(0, 1)
#lognormal
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rlnorm(2)
x = matrix(rnorm(10000), ncol = 2)
lambda = x %*% beta
time = rlnorm(nrow(x)/2, lambda, 1)
like = function(beta) {
lambda = x %*%beta
-sum(drlnorm(time, lambda, 1))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
#lognormal
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rlnorm(2)
x = matrix(rnorm(10000), ncol = 2)
lambda = x %*% beta
time = rlnorm(nrow(x)/2, lambda, 1)
like = function(beta) {
lambda = x %*%beta
-sum(dlnorm(time, lambda, 1))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
qqplot(result[,1], result[,3])
abline(0, 1)
head(result)
library(MulticastNetwork)
pplot
GiRplot
x = matrix(rnorm(10000), ncol = 2)
#exponential
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rnorm(2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
qqplot(result[,1], result[,3])
abline(0, 1, col = 'red')
#lognormal
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rlnorm(2)
lambda = x %*% beta
time = rlnorm(nrow(x)/2, lambda, 1)
like = function(beta) {
lambda = x %*%beta
-sum(dlnorm(time, lambda, 1))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
qqplot(result[,1], result[,3])
abline(0, 1, col = 'red')
x = matrix(rnorm(10000), ncol = 2)
GiR_PP_Plots = function(Forward_stats, Backward_stats) {
nms = colnames(Forward_stats)
for (i in 1:ncol(Forward_stats)) {
all = c(Backward_stats[, i], Forward_stats[, i])
quantiles = 1000
uniqueValues = quantile(all,seq(0, 1, length = quantiles))
qx1 = numeric(length(uniqueValues))
qx2 = numeric(length(uniqueValues))
for (j in 1:length(uniqueValues)) {
qx1[j] = mean(Forward_stats[, i] <= uniqueValues[j])
qx2[j] = mean(Backward_stats[, i] <= uniqueValues[j])
}
qqplot(x = qx1,
y = qx2,
ylim = c(0, 1),
xlim = c(0, 1),
ylab = "Backward",
xlab = "Forward",
col = "blue",
pch = 19,
cex = 0.25,
main = nms[i],
cex.lab = 0.25,
cex.axis = 0.25,
cex.main = 0.5)
abline(0, 1, lty = 1, col = "red", lwd = 1)
if (nrow(Forward_stats) > 10000) {
thinning2 = seq(from = floor(nrow(Forward_stats) / 10), to = nrow(Forward_stats), length.out = 10000)
Forward_test2 = Forward_stats[thinning2, i]
Backward_test2 = Backward_stats[thinning2, i]
} else {
Forward_test2 = Forward_stats[, i]
Backward_test2 = Backward_stats[, i]
}
text(paste("Backward Mean:", round(mean(Backward_stats[, i]), 4),
"\nForward Mean:", round(mean(Forward_stats[, i]), 4),
"\nt-test p-value:", round(t.test(Backward_test2, Forward_test2)$p.value, 4),
"\nMann-Whitney p-value:", round(wilcox.test(Backward_test2, Forward_test2)$p.value, 4)),
x = 0.65, y = 0.15, cex = 0.4)
}
}
GiR_PP_Plots(result[,1:2], result[,3:f])
GiR_PP_Plots(result[,1:2], result[,3:4])
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
x = matrix(rnorm(10000), ncol = 2)
GiR_PP_Plots = function(Forward_stats, Backward_stats) {
nms = colnames(Forward_stats)
for (i in 1:ncol(Forward_stats)) {
all = c(Backward_stats[, i], Forward_stats[, i])
quantiles = 1000
uniqueValues = quantile(all,seq(0, 1, length = quantiles))
qx1 = numeric(length(uniqueValues))
qx2 = numeric(length(uniqueValues))
for (j in 1:length(uniqueValues)) {
qx1[j] = mean(Forward_stats[, i] <= uniqueValues[j])
qx2[j] = mean(Backward_stats[, i] <= uniqueValues[j])
}
qqplot(x = qx1,
y = qx2,
ylim = c(0, 1),
xlim = c(0, 1),
ylab = "Backward",
xlab = "Forward",
col = "blue",
pch = 19,
cex = 0.25,
main = nms[i],
cex.lab = 0.25,
cex.axis = 0.25,
cex.main = 0.5)
abline(0, 1, lty = 1, col = "red", lwd = 1)
if (nrow(Forward_stats) > 10000) {
thinning2 = seq(from = floor(nrow(Forward_stats) / 10), to = nrow(Forward_stats), length.out = 10000)
Forward_test2 = Forward_stats[thinning2, i]
Backward_test2 = Backward_stats[thinning2, i]
} else {
Forward_test2 = Forward_stats[, i]
Backward_test2 = Backward_stats[, i]
}
text(paste("Backward Mean:", round(mean(Backward_stats[, i]), 4),
"\nForward Mean:", round(mean(Forward_stats[, i]), 4),
"\nt-test p-value:", round(t.test(Backward_test2, Forward_test2)$p.value, 4),
"\nMann-Whitney p-value:", round(wilcox.test(Backward_test2, Forward_test2)$p.value, 4)),
x = 0.65, y = 0.15, cex = 0.4)
}
}
#exponential
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rnorm(2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
#lognormal
result = matrix(NA, nrow =1000, 4)
for (i in 1:1000) {
beta = rlnorm(2)
lambda = x %*% beta
time = rlnorm(nrow(x)/2, lambda, 1)
like = function(beta) {
lambda = x %*%beta
-sum(dlnorm(time, lambda, 1))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
#exponential
Nsamp = 10000
result = matrix(NA, nrow =Nsamp, 4)
for (i in 1:Nsamp) {
beta = rnorm(2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda)))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
dexp
x = matrix(rnorm(10000), ncol = 2)
GiR_PP_Plots = function(Forward_stats, Backward_stats) {
nms = colnames(Forward_stats)
for (i in 1:ncol(Forward_stats)) {
all = c(Backward_stats[, i], Forward_stats[, i])
quantiles = 1000
uniqueValues = quantile(all,seq(0, 1, length = quantiles))
qx1 = numeric(length(uniqueValues))
qx2 = numeric(length(uniqueValues))
for (j in 1:length(uniqueValues)) {
qx1[j] = mean(Forward_stats[, i] <= uniqueValues[j])
qx2[j] = mean(Backward_stats[, i] <= uniqueValues[j])
}
qqplot(x = qx1,
y = qx2,
ylim = c(0, 1),
xlim = c(0, 1),
ylab = "Backward",
xlab = "Forward",
col = "blue",
pch = 19,
cex = 0.25,
main = nms[i],
cex.lab = 0.25,
cex.axis = 0.25,
cex.main = 0.5)
abline(0, 1, lty = 1, col = "red", lwd = 1)
if (nrow(Forward_stats) > 10000) {
thinning2 = seq(from = floor(nrow(Forward_stats) / 10), to = nrow(Forward_stats), length.out = 10000)
Forward_test2 = Forward_stats[thinning2, i]
Backward_test2 = Backward_stats[thinning2, i]
} else {
Forward_test2 = Forward_stats[, i]
Backward_test2 = Backward_stats[, i]
}
text(paste("Backward Mean:", round(mean(Backward_stats[, i]), 4),
"\nForward Mean:", round(mean(Forward_stats[, i]), 4),
"\nt-test p-value:", round(t.test(Backward_test2, Forward_test2)$p.value, 4),
"\nMann-Whitney p-value:", round(wilcox.test(Backward_test2, Forward_test2)$p.value, 4)),
x = 0.65, y = 0.15, cex = 0.4)
}
}
#exponential
Nsamp = 10000
result = matrix(NA, nrow =Nsamp, 4)
for (i in 1:Nsamp) {
beta = rnorm(2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda), log = TRUE))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
#exponential
Nsamp = 1000
result = matrix(NA, nrow =Nsamp, 4)
for (i in 1:Nsamp) {
beta = rnorm(2)
lambda = x %*% beta
time = rexp(nrow(x)/2, 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda), log = TRUE))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
dlnorm
head(result)
result = matrix(NA, nrow =Nsamp, 4)
for (i in 1:Nsamp) {
beta = rlnorm(2)
lambda = x %*% beta
time = rlnorm(nrow(x)/2, lambda, 1)
like = function(beta) {
lambda = x %*%beta
-sum(dlnorm(time, lambda, 1, log = TRUE))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
head(result)
nrow(x)/2
length(lambda)
x %*% beta
lambda
beta = rlnorm(2)
lambda = x %*% beta
dim(lambda)
nrow(x)
nrow(x)/2
x = matrix(rnorm(10000), ncol = 2)
GiR_PP_Plots = function(Forward_stats, Backward_stats) {
nms = colnames(Forward_stats)
for (i in 1:ncol(Forward_stats)) {
all = c(Backward_stats[, i], Forward_stats[, i])
quantiles = 1000
uniqueValues = quantile(all,seq(0, 1, length = quantiles))
qx1 = numeric(length(uniqueValues))
qx2 = numeric(length(uniqueValues))
for (j in 1:length(uniqueValues)) {
qx1[j] = mean(Forward_stats[, i] <= uniqueValues[j])
qx2[j] = mean(Backward_stats[, i] <= uniqueValues[j])
}
qqplot(x = qx1,
y = qx2,
ylim = c(0, 1),
xlim = c(0, 1),
ylab = "Backward",
xlab = "Forward",
col = "blue",
pch = 19,
cex = 0.25,
main = nms[i],
cex.lab = 0.25,
cex.axis = 0.25,
cex.main = 0.5)
abline(0, 1, lty = 1, col = "red", lwd = 1)
if (nrow(Forward_stats) > 10000) {
thinning2 = seq(from = floor(nrow(Forward_stats) / 10), to = nrow(Forward_stats), length.out = 10000)
Forward_test2 = Forward_stats[thinning2, i]
Backward_test2 = Backward_stats[thinning2, i]
} else {
Forward_test2 = Forward_stats[, i]
Backward_test2 = Backward_stats[, i]
}
text(paste("Backward Mean:", round(mean(Backward_stats[, i]), 4),
"\nForward Mean:", round(mean(Forward_stats[, i]), 4),
"\nt-test p-value:", round(t.test(Backward_test2, Forward_test2)$p.value, 4),
"\nMann-Whitney p-value:", round(wilcox.test(Backward_test2, Forward_test2)$p.value, 4)),
x = 0.65, y = 0.15, cex = 0.4)
}
}
#exponential
Nsamp = 1000
result = matrix(NA, nrow =Nsamp, 4)
for (i in 1:Nsamp) {
beta = rnorm(2)
lambda = x %*% beta
time = rexp(nrow(x), 1/exp(lambda))
like = function(beta) {
lambda = x %*%beta
-sum(dexp(time, 1/exp(lambda), log = TRUE))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
#lognormal
result = matrix(NA, nrow =Nsamp, 4)
for (i in 1:Nsamp) {
beta = rlnorm(2)
lambda = x %*% beta
time = rlnorm(nrow(x), lambda, 1)
like = function(beta) {
lambda = x %*%beta
-sum(dlnorm(time, lambda, 1, log = TRUE))
}
hey = optim(rep(0,2), like)
result[i,] = c(hey$par, beta)
}
par(mfrow = c(1,2))
GiR_PP_Plots(result[,1:2], result[,3:4])
head(result)
