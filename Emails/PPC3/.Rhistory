activenode
length(trimE)
length(c(min(which(dept[,3]>=5*365)):nrow(dept)))
length(c(min(which(dept[,3]>=3*365)):nrow(dept)))
trimE = c(min(which(dept[,3]>=5*365)):nrow(dept))
#exclude department less than 0.1% of collaboration
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
activenode
length(activenode)
trimE = c(min(which(dept[,3]>=3*365)):nrow(dept))
#exclude department less than 0.1% of collaboration
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
activenode
lenth9activenode
length(activenode)
dim(dept)
trimE = c(min(which(dept[,3]>=3*365)):nrow(dept))
#exclude department less than 0.1% of collaboration
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
activenode
length(activenode)
dept_reduced = matrix(NA, nrow = 0, ncol = 3)
for (d in 1:nrow(dept)) {
if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {
dept1 = which(activenode == dept[d,1])
dept2 = which(activenode == dept[d,2])
newrow =c(min(dept1, dept2), max(dept1, dept2), dept[d,3])
dept_reduced = rbind(dept_reduced, newrow)
}
}
colnames(dept_reduced) = c("i", "j", "day")
head(dept_reduced)
dim(dept_reduced)
dim(dept)
dim(unique(dept_reduced))
rownames(dept_reduced) = NULL
dept_reduced[,1] = as.numeric(dept_reduced[,1])
head(dept_reduced)
save(dept_day, file = "dept_day.RData")
dept_day = dept_reduced
save(dept_day, file = "dept_day.RData")
3*365
trimE = c(min(which(dept[,3]>=3*365 +1)):nrow(dept))
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
length(activenode)
getwd()
#weekly data
library(lubridate)
load("/Users/bomin8319/Desktop/PointProcess/edge.RData")
edge = PSU
load("/Users/bomin8319/Desktop/PointProcess/node.RData")
UPHershey = unique(node$College)[-c(2,5,8,9,13,15,19,21,22,26,27,28,31,37,38,40,41,44,47,49)]
node_UPHershey = node[which(node$College %in% UPHershey),]
edge_UPHershey = edge[which(edge$Source %in% node_UPHershey$Id & edge$Target %in% node_UPHershey$Id),]
edge = edge_UPHershey
node = node_UPHershey[,c(1:5, 7)]
#some dept got different key code although same college -> unify them
uniqdept = unique(node$Department)
weird = c()
iter = 1
for (d in 1:length(uniqdept)) {
hi = node[node$Department == uniqdept[d],-1]
if (length(unique(hi$Dept.Key)) >1) {
weird[iter] = d
iter = iter+1
}
}
node[node$Department == "OUTREACH" & node$College.Key == 1338,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 1338,2])
node[node$Department == "OUTREACH" & node$College.Key == 28,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 28,2])
node[node$Department == "OUTREACH" & node$College.Key == 89,2] = min(node[node$Department == "OUTREACH" & node$College.Key == 89,2])
node[node$Department == uniqdept[25],2] = min(node[node$Department == uniqdept[25],2])
node[node$Department == uniqdept[66] & node$College.Key == 80,2] = min(node[node$Department == uniqdept[66] & node$College.Key == 80,2])
node[node$Department == uniqdept[81] & node$College.Key == 23,2] = min(node[node$Department == uniqdept[81] & node$College.Key == 23,2])
node[node$Department == uniqdept[84] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[84] & node$College.Key == 3,2])
node[node$Department == uniqdept[104] & node$College.Key == 32,2] = min(node[node$Department == uniqdept[104] & node$College.Key == 32,2])
node[node$Department == uniqdept[119] & node$College.Key == 14,2] = min(node[node$Department == uniqdept[119] & node$College.Key == 14,2])
node[node$Department == uniqdept[123] & node$College.Key == 4,2] = min(node[node$Department == uniqdept[123] & node$College.Key == 4,2])
node[node$Department == uniqdept[138] & node$College.Key == 3,2] = min(node[node$Department == uniqdept[138] & node$College.Key == 3,2])
node$HUCK.INSTITUTES = as.numeric(node$HUCK.INSTITUTES)-1
#############################
#dept level
#edge$huck = 0
for (d in 1:nrow(edge)) {
#	edge$huck[d] = as.numeric(node[which(node$Id == edge[d,1]), 6] ==1 | node[which(node$Id == edge[d,2]), 6] ==1)
a = node[which(node$Id == edge[d,1]), 2]
b = node[which(node$Id == edge[d,2]), 2]
edge[d,1] = min(a,b)
edge[d,2] = max(a,b)
}
edge2 = edge[-which(edge[,1]==edge[,2]),]
edge3 = edge[which(edge[,1]==edge[,2]),]
#samecollege
dept = edge2
dept = unique(dept[,c(1,2,3,4)])
plot(table(table(dept$day)), main = "all ties", xlab = "Number of collaborations in a day", ylab = "Days with x number of collaborations")
uniqties = c()
it = 1
for (d in unique(dept$day)) {
uniqties[it] = length(unique(dept[dept$day==d,]$Id))
it = it + 1
}
plot(table(uniqties), main = "non-multicast ties", xlab = "Number of collaborations in a day", ylab = "Days with x number of collaborations")
dept = dept[,c(1,2,4)]
trimE = c(min(which(dept[,3]>=3*365 +1)):nrow(dept))
#exclude department less than 0.1% of collaboration
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
dept_reduced = matrix(NA, nrow = 0, ncol = 3)
for (d in 1:nrow(dept)) {
if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {
dept1 = which(activenode == dept[d,1])
dept2 = which(activenode == dept[d,2])
newrow =c(min(dept1, dept2), max(dept1, dept2), dept[d,3])
dept_reduced = rbind(dept_reduced, newrow)
}
}
colnames(dept_reduced) = c("i", "j", "day")
dept_reduced = unique(dept_reduced)
rownames(dept_reduced) = NULL
dept_reduced[,1] = as.numeric(dept_reduced[,1])
dept_day = dept_reduced
save(dept_day, file = "dept_day.RData")
head(dept_day)
dim(dept_day)
dim(unique(day))
dim(unique(dept_day))
#samecollege
dept = edge2
dept = unique(dept[,c(1,2,3,4)])
plot(table(table(dept$day)), main = "all ties", xlab = "Number of collaborations in a day", ylab = "Days with x number of collaborations")
uniqties = c()
it = 1
for (d in unique(dept$day)) {
uniqties[it] = length(unique(dept[dept$day==d,]$Id))
it = it + 1
}
plot(table(uniqties), main = "non-multicast ties", xlab = "Number of collaborations in a day", ylab = "Days with x number of collaborations")
dept = dept[,c(1,2,4)]
trimE = c(min(which(dept[,3]>=3*365 +1)):nrow(dept))
#exclude department less than 0.1% of collaboration
activenode = as.numeric(names(table(c(dept[trimE,1], dept[trimE,2])))[which(table(c(dept[trimE,1], dept[trimE,2])) >= 25)])
dept_reduced = matrix(NA, nrow = 0, ncol = 3)
for (d in 1:nrow(dept)) {
if (dept[d,1] %in% activenode & dept[d,2] %in% activenode) {
dept1 = which(activenode == dept[d,1])
dept2 = which(activenode == dept[d,2])
newrow =c(min(dept1, dept2), max(dept1, dept2), dept[d,3])
dept_reduced = rbind(dept_reduced, newrow)
}
}
colnames(dept_reduced) = c("i", "j", "day")
rownames(dept_reduced) = NULL
dept_reduced[,1] = as.numeric(dept_reduced[,1])
dept_day = dept_reduced
save(dept_day, file = "dept_day.RData")
dim(dept_day)
head(node)
nodenew = unique(node[,2:5])
node_reduced = data.frame(Id = 1:length(activenode), OriginalId = activenode)
head(node_reduced)
dim(node_reduced)
node_reduced = cbind(node_reduced, nodenew[sapply(1:length(activenode), function(i) {which(nodenew$Dept.Key == activenode[i])}),-1])
head(node_reduced)
dim(node_reduced)
node_reduced$faculty = 0
for (d in 1:nrow(node_reduced)) {
fac1 = sum(node$Dept.Key == node_reduced[d,2])
node_reduced$faculty[d] =fac1
}
head(node_reduced)
#add prop.of huck affiliate/cohire
node_reduced$huck = 0
for (i in 1:nrow(node_reduced)) {
id = node_reduced[i,2]
num = node[which(node$Dept.Key == id),]
node_reduced$huck[i] = sum(num$HUCK.INSTITUTES)
}
head(node_reduced)
table(node_reduced$huck)
#add prop.of huck affiliate/cohire
node_reduced$huck = 0
for (i in 1:nrow(node_reduced)) {
id = node_reduced[i,2]
num = node[which(node$Dept.Key == id),]
node_reduced$huck[i] = sum(num$HUCK.INSTITUTES) / nrow(num)
}
head(node_reduced)
#add prop.of huck affiliate/cohire
node_reduced$huck = 0
for (i in 1:nrow(node_reduced)) {
id = node_reduced[i,2]
num = node[which(node$Dept.Key == id),]
node_reduced$huck[i] = sum(num$HUCK.INSTITUTES) / nrow(num)
}
head(node_reduced)
hist(node_reduced$huck)
save(node_day, file = "node_day.RData")
node_day = node_reduced
save(node_day, file = "node_day.RData")
load("/Users/bomin8319/Desktop/PointProcess/dept_day.RData")
load("/Users/bomin8319/Desktop/PointProcess/node_day.RData")
source("/Users/bomin8319/Desktop/PointProcess/pkg2/R/core2.R")
library(Rcpp)
library(RcppArmadillo)
library(MCMCpack)
sourceCpp("/Users/bomin8319/Desktop/PointProcess/pkg2/src/sampler2.cpp")
dept = dept_day
node = node_day
head(dept)
A = nrow(node)
A
data = matrix(dept[,1:3], ncol = 3)
head(data)
try = PPLSM_infer_dist(data, node, 0, 2 * diag(4), c(0.0001, 0.0001), 35000, c(5,5), 15000, NULL, c(2,1))
try = PPLSM_infer_dist(data, node, 0, 2 * diag(4), c(0.0001, 0.0001), 350, c(5,5), 150, NULL, c(2,1))
source("/Users/bomin8319/Desktop/PointProcess/pkg2/R/core2.R")
try = PPLSM_infer_dist(data, node, 0, 2 * diag(4), c(0.0001, 0.0001), 350, c(5,5), 150, NULL, c(2,1))
names(try)
plot(try$loglike, type = 'l')
plot(try$beta[,1], type = 'l')
plot(try$Z[,1], type = 'l')
plot(try$sigma[,1], type = 'l')
plot(try$sigma, type = 'l')
source("/Users/bomin8319/Desktop/PointProcess/pkg2/R/core2.R")
try = PPLSM_infer_dist(data, node, 0, 2 * diag(4), c(0.0001, 0.0001), 35000, c(5,5), 15000, NULL, c(2,1))
names(try)
plot(try$loglike, type = 'l')
plot(try$beta[,1], type = 'l')
plot(try$beta[,2], type = 'l')
plot(try$beta[,3], type = 'l')
plot(try$beta[,4], type = 'l')
plot(try$beta[,5], type = 'l')
plot(try$Z[,1], type = 'l')
plot(try$sigma, type = 'l')
save(try, file = "/Users/bomin8319/Desktop/try.RData")
initial$beta = colMeans(try$beta)
initial = list()
initial$beta = colMeans(try$beta)
initial
try2 = PPLSM_infer_dist(data, node, 2, 2 * diag(4), c(0.0001, 0.0001), 35000, c(5,5), 15000, initial = NULL, c(2,1))
save(try2, file = "/Users/bomin8319/Desktop/try2.RData")
try3 = PPLSM_infer_factor(data, node, 2, 2 * diag(5), c(0.0001, 0.0001, 0.0005), 35000, c(5,5), 15000, initial = NULL, c(2,1))
plot(try3$loglike, type ='l')
plot(try3$sigma2, type ='l')
names(try3)
plot(try3$sigma, type ='l')
plot(try3$sigma[,1], type ='l')
plot(try3$sigma[,2], type ='l')
plot(try3$beta[,2], type ='l')
plot(try3$beta[,1], type ='l')
plot(try3$beta[,3], type ='l')
plot(try3$beta[,4], type ='l')
plot(try3$beta[,5], type ='l')
plot(try3$beta[,6], type ='l')
colMeans(try3$beta)
plot(try3$UDU[,6], type ='l')
plot(try3$UDU[,5], type ='l')
save(try3, file = "/Users/bomin8319/Desktop/try3.RData")
try3 = PPLSM_infer_factor(data, node, 2, 2 * diag(4), c(0.0001, 0.0001, 0.0005), 35000, c(5,5), 15000, initial = NULL, c(2,1))
names(try3)
plot(try3$loglike, type = 'l')
plot(try3$sigma, type = 'l')
plot(try3$sigma[,1], type = 'l')
plot(try3$sigma[,2], type = 'l')
plot(try3$beta[,2], type = 'l')
plot(try3$beta[,4], type = 'l')
plot(try3$beta[,5], type = 'l')
plot(try3$beta[,3], type = 'l')
plot(try3$UDU[,3], type = 'l')
plot(try3$UDU[,13], type = 'l')
plot(try3$UDU[,123], type = 'l')
save(try3, file = "/Users/bomin8319/Desktop/try3.RData")
PPfactor = list()
A = nrow(node)
beta = colMeans(try3$beta)[-5]
UDU = colMeans(try3$UDU)
beta
colMeans(try3$beta)
PPfactor = list()
A = nrow(node)
beta = colMeans(try3$beta)
UDU = colMeans(try3$UDU)
for (i in 1:500) {
print(i)
PPfactor[[i]] = PPLSM_generate(data[,3], node, c(beta), -UDU, initial = data[1:which_num(3*365, data[,3]),])
}
PPfactor_PPC = PPfactor
save(PPfactor_PPC, file = "/Users/bomin8319/Desktop/PPfactor_PPC.RData")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
timeunit = 3600
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
email[min(trim-1), 21] - initialtime
exp(1.229)
exp(0.458)
x = matrix(rnorm(1000), ncol = 2)
beta = rnorm(2)
x%*%beta
lambda1 = rexp(500, 1/exp(x%*%beta))
x = matrix(rnorm(1000), ncol = 2)
beta = rnorm(2)
time1 = rexp(500, 1/exp(x%*%beta))
time2 = rlnorm(500, x%*%beta, 1)
loglik1 = function(beta) {
-sum(dexp(time1, 1/exp(x%*%beta),log = TRUE))
}
loglik2 = function(beta) {
-sum(rlnorm(time2, 1x%*%beta, 1, log = TRUE))
}
x = matrix(rnorm(1000), ncol = 2)
beta = rnorm(2)
time1 = rexp(500, 1/exp(x%*%beta))
time2 = rlnorm(500, x%*%beta, 1)
loglik1 = function(beta) {
-sum(dexp(time1, 1/exp(x%*%beta),log = TRUE))
}
loglik2 = function(beta) {
-sum(rlnorm(time2, x%*%beta, 1, log = TRUE))
}
optim(rep(0, 2), loglik1)
beta
optim(rep(0, 2), loglik2)
x = matrix(rnorm(1000), ncol = 2)
beta = rnorm(2)
time1 = rexp(500, 1/exp(x%*%beta))
time2 = rlnorm(500, x%*%beta, 1)
loglik1 = function(beta) {
-sum(dexp(time1, 1/exp(x%*%beta),log = TRUE))
}
loglik2 = function(beta) {
-sum(dlnorm(time2, x%*%beta, 1, log = TRUE))
}
optim(rep(0, 2), loglik1)
optim(rep(0, 2), loglik2)
beta
x = matrix(rnorm(1000), ncol = 2)
beta = rnorm(2)
time1 = rexp(500, 1/exp(x%*%beta))
time2 = rlnorm(500, x%*%beta, 1)
loglik1 = function(beta) {
-sum(dexp(time1, 1/exp(x%*%beta),log = TRUE))
}
loglik2 = function(beta) {
-sum(dlnorm(time2, x%*%beta, 1, log = TRUE))
}
optim(rep(0, 2), loglik1)
optim(rep(0, 2), loglik2)
result = matrix(NA, nrow = 10000, 4)
for (i in 1:10000) {
x = matrix(rnorm(1000), ncol = 2)
beta = rnorm(2)
time1 = rexp(500, 1/exp(x%*%beta))
time2 = rlnorm(500, x%*%beta, 1)
loglik1 = function(beta) {
-sum(dexp(time1, 1/exp(x%*%beta),log = TRUE))
}
loglik2 = function(beta) {
-sum(dlnorm(time2, x%*%beta, 1, log = TRUE))
}
result[i,]=c(optim(rep(0, 2), loglik1)$par, optim(rep(0, 2), loglik2)$par)
}
head(result)
qqplot(result[,1],[,3])
qqplot(result[,1],result[,3])
qqplot(result[,2],result[,4])
abline(0, 1, col = 'red')
qqplot(result[,1],result[,3])
abline(0, 1, col = 'red')
qqplot(result[,2],result[,4])
abline(0, 1, col = 'red')
library(Rcpp)
library(RcppArmadillo)
sourceCpp("/Users/bomin8319/Desktop/MulticastNetwork/pkg/src")
sourceCpp("/Users/bomin8319/Desktop/MulticastNetwork/pkg/src/Multicast_rcpp.cpp")
mumat = rnorm(10, 2, 5)
mumat
mumat = matrix(rnorm(10), 2, 5)
mumat
senders = c(1,3)
timestamps = rexp(2)
Timepartsum2(mumat, senders, timetamps)
timestamps = rexp(2)
Timepartsum2(mumat, senders, timetamps)
Timepartsum2(mumat, senders, timestamps)
Timepartsum(mumat, senders, 1, timestamps)
Timepartsum(mumat, 1, senders, timestamps)
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)))
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE) , c(1)))
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
i =1
pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE)
dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE))
Timepartsum2(mumat, senders, timestamps)
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
sum(vapply(1:2, function(i) dexp(timestamps[i], exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
R::pexp
dexp
stats::C_exp
stats::C_dexp
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
sum(vapply(1:2, function(i) dexp(timestamps[i], exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
Timepartsum2(mumat, senders, timestamps)
sourceCpp("/Users/bomin8319/Desktop/MulticastNetwork/pkg/src/Multicast_rcpp.cpp")
mumat = matrix(rnorm(10), 2, 5)
senders = c(1,3)
timestamps = rexp(2)
Timepartsum(mumat, 1, senders, timestamps)
Timepartsum2(mumat, senders, timestamps)
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
sum(vapply(1:2, function(i) drlnorm(timestamps[i], mumat[i,senders[i]], 1, log = TRUE)+
sum(prlnorm(timestamps[i], mumat[i, -senders[i]], FALSE, TRUE)) , c(1)))
sum(vapply(1:2, function(i) dlnorm(timestamps[i], mumat[i,senders[i]], 1, log = TRUE)+
sum(plnorm(timestamps[i], mumat[i, -senders[i]], FALSE, TRUE)) , c(1)))
Timepartsum(mumat, 1, senders, timestamps)
Timepartsum(mumat, 1, senders, timestamps)
sum(vapply(1:2, function(i) dlnorm(timestamps[i], mumat[i,senders[i]], 1, log = TRUE)+
sum(plnorm(timestamps[i], mumat[i, -senders[i]], 1, FALSE, TRUE)) , c(1)))
sum(vapply(1:2, function(i) dexp(timestamps[i], 1/exp(mumat[i,senders[i]]), log = TRUE)+
sum(pexp(timestamps[i], 1/exp(mumat[i, -senders[i]]), FALSE, TRUE)) , c(1)))
Timepartsum2(mumat, senders, timestamps)
library(devtools)
setwd("/Users/bomin8319/Desktop/MulticastNetwork/pkg")
document()
check()
install()
library(MulticastNetwork)
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")
edge = Montgomery$edge
X = Montgomery$X
Y = Montgomery$Y
P = dim(X)[4]
Q = dim(Y)[3]
A = dim(Y)[2]
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
Montgomery_infer2 = Inference(edge, X, Y, 55000, c(10,1,1), 15000, prior.beta, prior.eta, prior.sigma2, initialval = NULL,
proposal.var = c(0.00001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "exponential")
save(Montgomery_infer2, file = "/Users/bomin8319/Desktop/Montgomery_infer2.RData")
colMeans(Montgomery_infer2$beta)
colMeans(Montgomery_infer2$eta)
load("/Users/bomin8319/Desktop/MulticastNetwork/Montgomery_infer.RData")
colMeans(Montgomery_infer$eta)
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC3")
for (n in 1:500) {
print(n)
Montgomery_PPC2 = PPC(length(edge), beta = colMeans(Montgomery_infer2$beta), eta = colMeans(Montgomery_infer2$eta),
sigma2 = mean(Montgomery_infer2$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer2$u, timedist = "exponential")
filename = paste0("Montgomery_PPCnew2", n,".RData")
save(Montgomery_PPC2, file = filename)
}
library(MulticastNetwork)
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")
edge = Montgomery$edge
X = Montgomery$X
Y = Montgomery$Y
P = dim(X)[4]
Q = dim(Y)[3]
A = dim(Y)[2]
set.seed(1)
missing = list()
#missingness of senders
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
#missingness of receivers
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1
#missingness of timestamps
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
for (d in 1:dim(Y)[1]) {
if (missing[[1]][d,1] == 1) {
edge[[d]]$a_d = NA
}
if (sum(missing[[2]][d,]) > 0) {
edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA
}
if (missing[[3]][d,1] == 1) {
edge[[d]]$t_d = NA
}
}
initial = list()
initial$beta = colMeans(Montgomery_infer2$beta)
initial$eta =  colMeans(Montgomery_infer2$eta)
initial$u = Montgomery_infer2$u
initial$sigma2 = mean(Montgomery_infer2$sigma2)
Montgomery_PPE2 = PPE(edge, X, Y, 550, c(5,5,1), 50, prior.beta, prior.eta, prior.sigma2,
initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600,
lasttime = Montgomery$lasttime, MHprop.var = 0.15, timedist = "exponential")
save(Montgomery_PPE2, file = "/Users/bomin8319/Desktop/Montgomery_PPE2.RData")
