head(node)
node
head(node_day)
node_day
node_day[order(node_day$huck),]
node_day[order(node_day$huck, decreasing = TRUE),]
exp(0.332)
exp(0.031)
exp(1.637)
library(PPLSM2)#
library(mvtnorm)#
load("/Users/bomin8319/Desktop/PointProcess/dept_day.RData")#
load("/Users/bomin8319/Desktop/PointProcess/node_day.RData")#
dept = dept_day#
node = node_day#
A = nrow(node)#
data = matrix(dept[,1:3], ncol = 3)
head(data)
sapply(unique(data[,3]), function(d){length(data[data[,3]==d,])/3})
multicast = sapply(unique(data[,3]), function(d){length(data[data[,3]==d,])/3})
hist(multicast)
summary(multicast)
summary(multicast) / (120*(119)/2)
tail(data)
120*(119)/2
library(PPLSM2)#
library(mvtnorm)#
load("/Users/bomin8319/Desktop/PointProcess/dept_day.RData")#
load("/Users/bomin8319/Desktop/PointProcess/node_day.RData")#
dept = dept_day#
node = node_day#
A = nrow(node)#
data = matrix(dept[,1:3], ncol = 3)
multicast = sapply()
head(data)
multicast = sapply(unique(data[,3]), function(d) length(data[data[,3]==d,])/3)
head(multicast)
multicast2 = sapply(unique(data[,3]), function(d) length(unique(data[data[,3]==d,]))/3)
head(multicast2)
sum(multicast-multicast2)
multicast
multicast2
d = unique(data[,3])[56]
d
data[data[,3]==94,]
data[,3]==94
data[data[,3]==94,]
data[which(data[,3]==94),]
length(data[data[,3]==94,])/3
data[data[,3]==94,]
dim(data)
1265/23856
# draw from beta .75, .75#
x <- rbeta(1000000,.5,.5)#
fstar <- dbeta(x,.5,.5)#
f <- dbeta(x,.75,.75)#
#
x.sample <- sample(x,100000,prob=f/fstar/(sum(f/fstar)),rep=T)#
x.true <- rbeta(100000,.75,.75)#
#
qtiles <- seq(.001,.999,length=1000)#
#
qx.sample <- quantile(x.sample,qtiles)#
qx.true <- quantile(x.true,qtiles)#
#
plot(qx.sample,qx.true)#
abline(0,1)
hist(x)
hist(x.true)
hist(x.sample)
library(MulticastNetwork)#
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 500#
inner = c(1, 1, 1)#
burn = 0
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
load('~/Desktop/MulticastNetwork/Emails/Montgomery_PPE.RData')#
load('~/Desktop/MulticastNetwork/Emails/Montgomery_PPE2.RData')
library(gridExtra)#
p = list()#
##################
truesender = sapply(Montgomery_PPE$sendermissing, function(d) edge[[d]]$a_d)#
predprob = Montgomery_PPE$senderprob/rowSums(Montgomery_PPE$senderprob)#
predprob2 = Montgomery_PPE2$senderprob/rowSums(Montgomery_PPE2$senderprob)#
#
sender = data.frame(probtrue = sapply(1:62, function(d) predprob[d,truesender[d]]), dist = rep("lognormal", 62))#
sender = rbind(sender, data.frame(probtrue = sapply(1:62, function(d) predprob2[d,truesender[d]]), dist = rep("exponential", 62)))#
library(ggplot2)#
library(reshape)#
sender = melt(sender)#
colnames(sender)[3] = "correct"#
p[[1]]=ggplot(data = sender, aes(x = dist, y = correct, fill = dist))+geom_boxplot()
truereceiver = unlist(sapply(Montgomery_PPE$receivermissing, function(d) edge[[d]]$r_d[which(missing[[2]][d,]==1)]))#
predprob = Montgomery_PPE$receiverprob#
predprob2 = Montgomery_PPE2$receiverprob#
#
probtrue = sapply(1:1118, function(d) predprob[d,truereceiver[d]+1])#
#probtrue[probtrue==1] = 0.999#
probtrue2 = sapply(1:1118, function(d) predprob2[d,truereceiver[d]+1])#
#probtrue2[probtrue2==1] = 0.999#
#
receiver = data.frame(probtrue = log(probtrue /(1-probtrue)), dist = rep("lognormal", 1118))#
receiver = rbind(receiver, data.frame(probtrue = log(probtrue2/(1-probtrue2)), dist = rep("exponential", 1118)))#
library(ggplot2)#
library(reshape)#
receiver = melt(receiver)#
colnames(receiver)[3] = "logit"
p[[2]]=ggplot(data = receiver, aes(x = logit, fill = dist))+geom_histogram(position = "dodge")
truetime = sapply(Montgomery_PPE$timemissing, function(d) edge[[d]]$t_d-edge[[d-1]]$t_d)/3600#
predtime = Montgomery_PPE$timepredict#
predtime2 = Montgomery_PPE2$timepredict#
#
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
library(ggplot2)#
library(reshape)#
time = melt(time)#
colnames(time)[3] = "MdAPE"#
p[[3]]=ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+ylim(0, 20)+theme(legend.position = "bottom")
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[3]])#
p3 <- grid.arrange(arrangeGrob(#
				p[[1]] + theme(legend.position="none"),#
                        p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), #
                       nrow=1), mylegend,#
        heights=c(10, 1))
p[[3]]=ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+ylim(0, 10)+theme(legend.position = "bottom")#
ggplot(data = time, aes(x = MdAPE, fill = dist))+geom_histogram(position = "dodge")
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[3]])#
p3 <- grid.arrange(arrangeGrob(#
				p[[1]] + theme(legend.position="none"),#
                        p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), #
                       nrow=1), mylegend,#
        heights=c(10, 1))
p[[3]]=ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+ylim(0, 15)+theme(legend.position = "bottom")
mylegend<-g_legend(p[[3]])#
p3 <- grid.arrange(arrangeGrob(#
				p[[1]] + theme(legend.position="none"),#
                        p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), #
                       nrow=1), mylegend,#
        heights=c(10, 1))
p[[3]]=ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")
mylegend<-g_legend(p[[3]])#
p3 <- grid.arrange(arrangeGrob(#
				p[[1]] + theme(legend.position="none"),#
                        p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), #
                       nrow=1), mylegend,#
        heights=c(10, 1))
stats = boxplot.stats(time$MdAPE)$stats
stats
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, ymin = stats[1], ymax = stats[5]))+geom_boxplot()+theme(legend.position = "bottom"
)
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, ymin = stats[1], ymax = stats[5]))+geom_boxplot()+theme(legend.position = "bottom")
stats[5]
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
stats = boxplot.stats(time$MdAPE)$stats
stats
time = melt(time)
colnames(time)[3] = "MdAPE"
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, ymin = stats[1], ymax = stats[5]))+geom_boxplot()+theme(legend.position = "bottom")
head(time)
truetime = sapply(Montgomery_PPE$timemissing, function(d) edge[[d]]$t_d-edge[[d-1]]$t_d)/3600#
predtime = Montgomery_PPE$timepredict#
predtime2 = Montgomery_PPE2$timepredict#
#
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
#
time = melt(time)#
stats = boxplot.stats(time$MdAPE)$stats
stats
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
#
time = melt(time)
head(time)
stats = boxplot.stats(time$value)$stats
stats
colnames(time)[3] = "MdAPE"
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, ymin = stats[1], ymax = stats[5]))+geom_boxplot()+theme(legend.position = "bottom")
boxplot.stats(time$value)
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
#
time = melt(time)
boxplot.stats(time$value)
summary(time$value)
?boxplot.stats
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, ymin = stats[1], ymax = stats[5]))+geom_boxplot(stat = "identity")+theme(legend.position = "bottom")
truetime = sapply(Montgomery_PPE$timemissing, function(d) edge[[d]]$t_d-edge[[d-1]]$t_d)/3600#
predtime = Montgomery_PPE$timepredict#
predtime2 = Montgomery_PPE2$timepredict#
#
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
#
time = melt(time)#
stats = boxplot.stats(time$value)$stats#
#
colnames(time)[3] = "MdAPE"
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, ymin = stats[1], ymax = stats[5]))+geom_boxplot(stat = "identity")+theme(legend.position = "bottom")
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, lower = stats[2], middle = stats[3], upper = stats[4], ymin = stats[1], ymax = stats[5]))+geom_boxplot(stat = "identity")+theme(legend.position = "bottom")
truetime = sapply(Montgomery_PPE$timemissing, function(d) edge[[d]]$t_d-edge[[d-1]]$t_d)/3600#
predtime = Montgomery_PPE$timepredict#
predtime2 = Montgomery_PPE2$timepredict#
#
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
#
time = melt(time)#
stats = boxplot.stats(time$value)$stats#
#
colnames(time)[3] = "MdAPE"
stats
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, lower = stats[2], middle = stats[3], upper = stats[4], ymin = stats[1], ymax = stats[5]))+geom_boxplot(stat = "identity")+theme(legend.position = "bottom")
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist, lower = stats[2], middle = stats[3], upper = stats[4], ymin = stats[1], ymax = stats[5]))+geom_boxplot(stat = "identity")+theme(legend.position = "bottom")+ylim(0, 50)
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot(outlier.size=-1)+theme(legend.position = "bottom")
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot(outlier.size=-1)+theme(legend.position = "bottom")+ylim(0, 50)
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+ylim(0, 50)
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+coord_cartesian(ylim(0, 50))
truetime = sapply(Montgomery_PPE$timemissing, function(d) edge[[d]]$t_d-edge[[d-1]]$t_d)/3600#
predtime = Montgomery_PPE$timepredict#
predtime2 = Montgomery_PPE2$timepredict#
#
time = data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime[d,]-truetime[d])/truetime[d]))), dist = rep("lognormal", 62))#
time = rbind(time, data.frame(MdAPE = sapply(1:62, function(d) median(abs((predtime2[d,]-truetime[d])/truetime[d]))), dist = rep("exponential", 62)))#
#
time = melt(time)#
stats = boxplot.stats(time$value)$stats#
#
colnames(time)[3] = "MdAPE"
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+coord_cartesian(ylim(0, 50))
head(time)
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+coord_cartesian(ylim=c(0, 50))
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+coord_cartesian(ylim=c(0, 100))
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")
ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+coord_cartesian(ylim=c(0, 100))
p[[3]]=ggplot(data = time, aes(x = dist, y = MdAPE, fill = dist))+geom_boxplot()+theme(legend.position = "bottom")+coord_cartesian(ylim=c(0, 100))
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
mylegend<-g_legend(p[[3]])#
p3 <- grid.arrange(arrangeGrob(#
				p[[1]] + theme(legend.position="none"),#
                        p[[2]] + theme(legend.position="none"),#
                         p[[3]] + theme(legend.position="none"), #
                       nrow=1), mylegend,#
        heights=c(10, 1))
hist(rlnorm(1000, 1, 2))
hist(rexp(1000,1)
)
hist(rlnorm(1000, 1, 2))
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")#
#
D = 100#
A = 5#
P = 4#
#Q = 3#
X = array(rnorm(D*A*A*P), dim = c(D,A,A,P))#
X[,,,1] = 1#
#Y = array(rnorm(D*A*Q), dim = c(D,A,Q))#
Q = 3#
Y = array(1, dim = c(D,A,Q))#
for (a in 1:A) {#
  Y[,a,2] = a#
  if (a != 1) {#
    Y[,a,3] = 0#
  }#
}#
support = gibbs.measure.support(A-1)#
prior.beta = list(mean = c(-3, rep(0, P-1)), var = diag(P))#
prior.eta = list(mean = rep(0, Q), var = diag(Q))#
prior.sigma2 = list(a = 3, b = 1)#
Nsamp = 100#
outer = 10#
inner = c(5, 5, 1)#
burn = 0#
#Schein test#
result = matrix(NA, Nsamp, 2*(3+P+Q))#
for (n in 1:Nsamp) {#
  if (n %% 100 == 0) print(n)#
  beta = rmvnorm_arma(1, prior.beta$mean, prior.beta$var)#
  eta = rmvnorm_arma(1, prior.eta$mean, prior.eta$var)#
  sigma2 = rinvgamma(1, prior.sigma2$a, prior.sigma2$b)#
  initial = Generate(D, A, beta, eta, sigma2, X, Y, support)#
  infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial2, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)#
  initial2 = Generate(D, A, infer$beta[outer,], infer$eta[outer,], infer$sigma2[outer,], X, Y, support)                  #
  result[n, ] = c(mean(vapply(initial$data, function(x) sum(x$r_d), c(1))),#
 				 mean(vapply(2:D, function(d) initial$data[[d]]$t_d-initial$data[[d-1]]$t_d, c(1))),#
                  initial$beta, initial$eta, initial$sigma2, #
                 mean(vapply(initial2$data, function(x) sum(x$r_d), c(1))),#
                  mean(vapply(2:D, function(d) initial2$data[[d]]$t_d-initial2$data[[d-1]]$t_d, c(1))),#
                  initial2$beta, initial2$eta, initial2$sigma2)			 #
}#
par(mfrow=c(2,5))#
GiR_PP_Plots(result[,c(1:(3+P+Q))], result[,c((4+P+Q):(2*(3+P+Q)))])
D = 100#
A = 5#
P = 4#
#Q = 3#
X = array(rnorm(D*A*A*P), dim = c(D,A,A,P))#
X[,,,1] = 1#
#Y = array(rnorm(D*A*Q), dim = c(D,A,Q))#
Q = 3#
Y = array(1, dim = c(D,A,Q))#
for (a in 1:A) {#
  Y[,a,2] = a#
  if (a != 1) {#
    Y[,a,3] = 0#
  }#
}#
support = gibbs.measure.support(A-1)#
prior.beta = list(mean = c(-3, rep(0, P-1)), var = diag(P))#
prior.eta = list(mean = rep(0, Q), var = diag(Q))#
prior.sigma2 = list(a = 3, b = 1)#
Nsamp = 100#
outer = 10#
inner = c(5, 5, 1)#
burn = 0#
#Schein test#
result = matrix(NA, Nsamp, 2*(3+P+Q))#
for (n in 1:Nsamp) {#
  if (n %% 100 == 0) print(n)#
  beta = rmvnorm_arma(1, prior.beta$mean, prior.beta$var)#
  eta = rmvnorm_arma(1, prior.eta$mean, prior.eta$var)#
  sigma2 = rinvgamma(1, prior.sigma2$a, prior.sigma2$b)#
  initial = Generate(D, A, beta, eta, sigma2, X, Y, support)#
  infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = ifelse(n==1, initial, initial2), proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)#
  initial2 = Generate(D, A, infer$beta[outer,], infer$eta[outer,], infer$sigma2[outer,], X, Y, support)                  #
  result[n, ] = c(mean(vapply(initial$data, function(x) sum(x$r_d), c(1))),#
 				 mean(vapply(2:D, function(d) initial$data[[d]]$t_d-initial$data[[d-1]]$t_d, c(1))),#
                  initial$beta, initial$eta, initial$sigma2, #
                 mean(vapply(initial2$data, function(x) sum(x$r_d), c(1))),#
                  mean(vapply(2:D, function(d) initial2$data[[d]]$t_d-initial2$data[[d-1]]$t_d, c(1))),#
                  initial2$beta, initial2$eta, initial2$sigma2)			 #
}#
par(mfrow=c(2,5))#
GiR_PP_Plots(result[,c(1:(3+P+Q))], result[,c((4+P+Q):(2*(3+P+Q)))])
D = 100#
A = 5#
P = 4#
#Q = 3#
X = array(rnorm(D*A*A*P), dim = c(D,A,A,P))#
X[,,,1] = 1#
#Y = array(rnorm(D*A*Q), dim = c(D,A,Q))#
Q = 3#
Y = array(1, dim = c(D,A,Q))#
for (a in 1:A) {#
  Y[,a,2] = a#
  if (a != 1) {#
    Y[,a,3] = 0#
  }#
}#
support = gibbs.measure.support(A-1)#
prior.beta = list(mean = c(-3, rep(0, P-1)), var = diag(P))#
prior.eta = list(mean = rep(0, Q), var = diag(Q))#
prior.sigma2 = list(a = 3, b = 1)#
Nsamp = 100#
outer = 10#
inner = c(5, 5, 1)#
burn = 0#
#Schein test#
result = matrix(NA, Nsamp, 2*(3+P+Q))#
for (n in 1:Nsamp) {#
  if (n %% 100 == 0) print(n)#
  beta = rmvnorm_arma(1, prior.beta$mean, prior.beta$var)#
  eta = rmvnorm_arma(1, prior.eta$mean, prior.eta$var)#
  sigma2 = rinvgamma(1, prior.sigma2$a, prior.sigma2$b)#
  initial = Generate(D, A, beta, eta, sigma2, X, Y, support)#
  if (n == 1) {#
  infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)#
  } else {#
 infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial2, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)  	#
  }#
  initial2 = Generate(D, A, infer$beta[outer,], infer$eta[outer,], infer$sigma2[outer,], X, Y, support)                  #
  result[n, ] = c(mean(vapply(initial$data, function(x) sum(x$r_d), c(1))),#
 				 mean(vapply(2:D, function(d) initial$data[[d]]$t_d-initial$data[[d-1]]$t_d, c(1))),#
                  initial$beta, initial$eta, initial$sigma2, #
                 mean(vapply(initial2$data, function(x) sum(x$r_d), c(1))),#
                  mean(vapply(2:D, function(d) initial2$data[[d]]$t_d-initial2$data[[d-1]]$t_d, c(1))),#
                  initial2$beta, initial2$eta, initial2$sigma2)			 #
}#
par(mfrow=c(2,5))#
GiR_PP_Plots(result[,c(1:(3+P+Q))], result[,c((4+P+Q):(2*(3+P+Q)))])
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")#
#
D = 100#
A = 5#
P = 4#
#Q = 3#
X = array(rnorm(D*A*A*P), dim = c(D,A,A,P))#
X[,,,1] = 1#
#Y = array(rnorm(D*A*Q), dim = c(D,A,Q))#
Q = 3#
Y = array(1, dim = c(D,A,Q))#
for (a in 1:A) {#
  Y[,a,2] = a#
  if (a != 1) {#
    Y[,a,3] = 0#
  }#
}#
support = gibbs.measure.support(A-1)#
prior.beta = list(mean = c(-3, rep(0, P-1)), var = diag(P))#
prior.eta = list(mean = rep(0, Q), var = diag(Q))#
prior.sigma2 = list(a = 3, b = 1)#
Nsamp = 100#
outer = 50#
inner = c(5, 5, 1)#
burn = 0#
#Schein test#
result = matrix(NA, Nsamp, 2*(3+P+Q))#
for (n in 1:Nsamp) {#
  if (n %% 100 == 0) print(n)#
  beta = rmvnorm_arma(1, prior.beta$mean, prior.beta$var)#
  eta = rmvnorm_arma(1, prior.eta$mean, prior.eta$var)#
  sigma2 = rinvgamma(1, prior.sigma2$a, prior.sigma2$b)#
  initial = Generate(D, A, beta, eta, sigma2, X, Y, support)#
  if (n == 1) {#
  infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)#
  } else {#
 infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial2, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)  	#
  }#
  initial2 = Generate(D, A, infer$beta[outer,], infer$eta[outer,], infer$sigma2[outer,], X, Y, support)                  #
  result[n, ] = c(mean(vapply(initial$data, function(x) sum(x$r_d), c(1))),#
 				 mean(vapply(2:D, function(d) initial$data[[d]]$t_d-initial$data[[d-1]]$t_d, c(1))),#
                  initial$beta, initial$eta, initial$sigma2, #
                 mean(vapply(initial2$data, function(x) sum(x$r_d), c(1))),#
                  mean(vapply(2:D, function(d) initial2$data[[d]]$t_d-initial2$data[[d-1]]$t_d, c(1))),#
                  initial2$beta, initial2$eta, initial2$sigma2)			 #
}#
par(mfrow=c(2,5))#
GiR_PP_Plots(result[,c(1:(3+P+Q))], result[,c((4+P+Q):(2*(3+P+Q)))])
D = 100#
A = 5#
P = 4#
#Q = 3#
X = array(rnorm(D*A*A*P), dim = c(D,A,A,P))#
X[,,,1] = 1#
#Y = array(rnorm(D*A*Q), dim = c(D,A,Q))#
Q = 3#
Y = array(1, dim = c(D,A,Q))#
for (a in 1:A) {#
  Y[,a,2] = a#
  if (a != 1) {#
    Y[,a,3] = 0#
  }#
}#
support = gibbs.measure.support(A-1)#
prior.beta = list(mean = c(-3, rep(0, P-1)), var = diag(P))#
prior.eta = list(mean = rep(0, Q), var = diag(Q))#
prior.sigma2 = list(a = 3, b = 1)#
Nsamp = 1000#
outer = 50#
inner = c(5, 5, 5)#
burn = 0#
#Schein test#
result = matrix(NA, Nsamp, 2*(3+P+Q))#
for (n in 1:Nsamp) {#
  if (n %% 100 == 0) print(n)#
  beta = rmvnorm_arma(1, prior.beta$mean, prior.beta$var)#
  eta = rmvnorm_arma(1, prior.eta$mean, prior.eta$var)#
  sigma2 = rinvgamma(1, prior.sigma2$a, prior.sigma2$b)#
  initial = Generate(D, A, beta, eta, sigma2, X, Y, support)#
  if (n == 1) {#
  infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)#
  } else {#
 infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial2, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)  	#
  }#
  initial2 = Generate(D, A, infer$beta[outer,], infer$eta[outer,], infer$sigma2[outer,], X, Y, support)                  #
  result[n, ] = c(mean(vapply(initial$data, function(x) sum(x$r_d), c(1))),#
 				 mean(vapply(2:D, function(d) initial$data[[d]]$t_d-initial$data[[d-1]]$t_d, c(1))),#
                  initial$beta, initial$eta, initial$sigma2, #
                 mean(vapply(initial2$data, function(x) sum(x$r_d), c(1))),#
                  mean(vapply(2:D, function(d) initial2$data[[d]]$t_d-initial2$data[[d-1]]$t_d, c(1))),#
                  initial2$beta, initial2$eta, initial2$sigma2)			 #
}#
par(mfrow=c(2,5))#
GiR_PP_Plots(result[,c(1:(3+P+Q))], result[,c((4+P+Q):(2*(3+P+Q)))])
Nsamp = 1000#
outer = 50#
inner = c(15, 5, 15)#
burn = 0#
#Schein test#
result = matrix(NA, Nsamp, 2*(3+P+Q))#
for (n in 1:Nsamp) {#
  if (n %% 100 == 0) print(n)#
  beta = rmvnorm_arma(1, prior.beta$mean, prior.beta$var)#
  eta = rmvnorm_arma(1, prior.eta$mean, prior.eta$var)#
  sigma2 = rinvgamma(1, prior.sigma2$a, prior.sigma2$b)#
  initial = Generate(D, A, beta, eta, sigma2, X, Y, support)#
  if (n == 1) {#
  infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)#
  } else {#
 infer = Inference(initial$data, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, #
                    initial = initial2, proposal.var = c(0.01, 0.1, 0.01, 0.5), lasttime = 0)  	#
  }#
  initial2 = Generate(D, A, infer$beta[outer,], infer$eta[outer,], infer$sigma2[outer,], X, Y, support)                  #
  result[n, ] = c(mean(vapply(initial$data, function(x) sum(x$r_d), c(1))),#
 				 mean(vapply(2:D, function(d) initial$data[[d]]$t_d-initial$data[[d-1]]$t_d, c(1))),#
                  initial$beta, initial$eta, initial$sigma2, #
                 mean(vapply(initial2$data, function(x) sum(x$r_d), c(1))),#
                  mean(vapply(2:D, function(d) initial2$data[[d]]$t_d-initial2$data[[d-1]]$t_d, c(1))),#
                  initial2$beta, initial2$eta, initial2$sigma2)			 #
}#
par(mfrow=c(2,5))#
GiR_PP_Plots(result[,c(1:(3+P+Q))], result[,c((4+P+Q):(2*(3+P+Q)))])
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')#
Montgomery = Temporal_Email_Data$Montgomery#
email = Montgomery$email_data#
email = unique(email)#
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))#
email = email[order(email$timepoints), ]#
edge = list()#
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))#
for (d in 1:nrow(email)) {#
	t_d = email[d, 21] - initialtime#
	edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)#
}#
A = length(Montgomery$manager_gender)#
#
#observed statistics#
timeunit = 3600#
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])#
#
outdegree = tabulate(email[trim,2], A)#
indegree = colSums(email[trim,3:20])#
recipients = tabulate(rowSums(email[trim,3:20]), A-1)#
timeinc = diff(sort(email$timepoints)[43:max(trim)])/3600
indegreedist = matrix(NA, 500, A)#
outdegreedist = matrix(NA,  500, A)#
recipientsdist = matrix(NA,  500, A-1)#
timedist = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC3")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew", n,".RData")#
	load(filename)#
	outdegreedist[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC[[x]]$a_d, c(1)), A)#
	indegreedist[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC[[x]]$r_d))#
	recipientsdist[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC[[x]]$r_d), c(1)), A-1)#
	timedist[n, ] = vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))/ timeunit#
} #
#
outdegreedist = data.frame(outdegreedist)#
colnames(outdegreedist)=1:18#
library(ggplot2)#
library(reshape)#
data = melt(outdegreedist)#
colnames(data) = c("Node", "Outdegree")
indegreedist = matrix(NA, 500, A)#
outdegreedist = matrix(NA,  500, A)#
recipientsdist = matrix(NA,  500, A-1)#
timedist = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC3")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew2", n,".RData")#
	load(filename)#
	outdegreedist[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC2[[x]]$a_d, c(1)), A)#
	indegreedist[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC2[[x]]$r_d))#
	recipientsdist[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC2[[x]]$r_d), c(1)), A-1)#
	timedist[n, ] = vapply(1:621, function(x) Montgomery_PPC2[[x]]$t_d, c(1))/ timeunit#
} #
#
outdegreedist = data.frame(outdegreedist)#
colnames(outdegreedist)=1:18#
library(ggplot2)#
library(reshape)#
data = melt(outdegreedist)#
colnames(data) = c("Node", "Outdegree")#
#
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)#
ggplot(data = data, aes(x = Node, y = Outdegree)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
indegreedist = data.frame(indegreedist)#
colnames(indegreedist)=1:18#
library(ggplot2)#
library(reshape)#
data = melt(indegreedist)#
colnames(data) = c("Node", "Indegree")#
#
indegree = data.frame(Node = 1:18, Indegree = indegree)#
ggplot(data = data, aes(x = Node, y = Indegree)) +geom_boxplot() + geom_line(data = indegree, col = 'red')
recipientsdist = data.frame(recipientsdist[,1:14])#
colnames(recipientsdist)=1:14#
library(ggplot2)#
library(reshape)#
data = melt(recipientsdist)#
colnames(data) = c("RecipientSize", "Documents")#
#
recipients = data.frame(RecipientSize = 1:14, Documents = recipients[1:14])#
ggplot(data = data, aes(x = RecipientSize, y = Documents) )+geom_boxplot() + geom_line(data = recipients, col = 'red')
uniqueValues = quantile(c(timedist[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}#
#
time = data.frame(Simulated = qx1, Observed = qx2)#
ggplot(data = time, aes(x = Simulated, y = Observed)) + geom_point() + geom_abline(intercept = 0, slope = 1, col = 'red')
#observed statistics#
timeunit = 3600#
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])#
#
outdegree = tabulate(email[trim,2], A)#
indegree = colSums(email[trim,3:20])#
recipients = tabulate(rowSums(email[trim,3:20]), A-1)#
timeinc = diff(sort(email$timepoints)[43:max(trim)])/3600#
indegreedist = matrix(NA, 500, A)#
outdegreedist = matrix(NA,  500, A)#
recipientsdist = matrix(NA,  500, A-1)#
timedist = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew", n,".RData")#
	load(filename)#
	outdegreedist[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC[[x]]$a_d, c(1)), A)#
	indegreedist[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC[[x]]$r_d))#
	recipientsdist[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC[[x]]$r_d), c(1)), A-1)#
	timedist[n, ] = vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))/ timeunit#
}
indegreedist2 = matrix(NA, 500, A)#
outdegreedist2 = matrix(NA,  500, A)#
recipientsdist2 = matrix(NA,  500, A-1)#
timedist2 = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC3")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew2", n,".RData")#
	load(filename)#
	outdegreedist2[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC2[[x]]$a_d, c(1)), A)#
	indegreedist2[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC2[[x]]$r_d))#
	recipientsdist2[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC2[[x]]$r_d), c(1)), A-1)#
	timedist2[n, ] = vapply(1:621, function(x) Montgomery_PPC2[[x]]$t_d, c(1))/ timeunit#
}
outdegreedist = data.frame(lognormal=outdegreedist, exponential = outdegreedist2)
head(outdegreedist)
dim(outdegreedist)
outdegreedist = data.frame(outdegreedist, model = rep("lognormal", 500))
indegreedist1 = matrix(NA, 500, A)#
outdegreedist1 = matrix(NA,  500, A)#
recipientsdist1 = matrix(NA,  500, A-1)#
timedist1 = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew", n,".RData")#
	load(filename)#
	outdegreedist1[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC[[x]]$a_d, c(1)), A)#
	indegreedist1[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC[[x]]$r_d))#
	recipientsdist1[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC[[x]]$r_d), c(1)), A-1)#
	timedist1[n, ] = vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))/ timeunit#
}
indegreedist2 = matrix(NA, 500, A)#
outdegreedist2 = matrix(NA,  500, A)#
recipientsdist2 = matrix(NA,  500, A-1)#
timedist2 = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC3")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew2", n,".RData")#
	load(filename)#
	outdegreedist2[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC2[[x]]$a_d, c(1)), A)#
	indegreedist2[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC2[[x]]$r_d))#
	recipientsdist2[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC2[[x]]$r_d), c(1)), A-1)#
	timedist2[n, ] = vapply(1:621, function(x) Montgomery_PPC2[[x]]$t_d, c(1))/ timeunit#
}
dim(outdegreedist1)
outdegreedist = data.frame(outdegreedist, model = rep("lognormal", 500))
head(outdegreedist)
outdegreedist = data.frame(outdegreedist, rep("lognormal", 500))
outdegreedist = data.frame(outdegreedist1, rep("lognormal", 500))
head(outdegreedist)
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))
head(outdegreedist)
colnames(outdegreedist)[1:19]=1:18
colnames(outdegreedist)[1:18]=1:18
head(outdegreedist)
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))
library(ggplot2)#
library(reshape)#
data = melt(outdegreedist)
head(data)
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
colnames(outdegreedist)[1:18]=1:18#
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))
head(outdegreedist)
data = melt(outdegreedist)
head(data)
colnames(data)[-1] = c("Node", "Outdegree")
colnames(data) = c("Model","Node", "Outdegree")
head(data)
ggplot(data = data, aes(x = Node, y = Outdegree, colour = model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)#
ggplot(data = data, aes(x = Node, y = Outdegree, colour = model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
ggplot(data = data, aes(x = Node, y = Outdegree, colour = Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
colnames(outdegreedist)[1:18]=1:18#
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
colnames(outdegreedist)[1:18]=1:18#
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))
tail(outdegreedist)
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
colnames(outdegreedist)[1:18]=1:18
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))
data.frame(outdegreedist2, model = rep("exponential", 500))
rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))#
colnames(outdegreedist)[1:18]=1:18#
library(ggplot2)#
library(reshape)#
data = melt(outdegreedist)#
colnames(data) = c("Model","Node", "Outdegree")#
#
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)#
ggplot(data = data, aes(x = Node, y = Outdegree, colour = Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))#
colnames(outdegreedist)[1:18]=1:18#
library(ggplot2)#
library(reshape)#
data = melt(outdegreedist)
head(data)
colnames(data) = c("Model","Node", "Outdegree")
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)#
ggplot(data = data, aes(x = Node, y = Outdegree, colour = Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
head(data)
head(data)
ggplot(data = data, aes(x = Node, y = Outdegree, colour = Model)) +geom_boxplot()
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)#
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
head(outdegree)
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)
rm(outdegree)
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)
outdegree = tabulate(email[trim,2], A)
outdegree = data.frame(Node = 1:18, Outdegree = outdegree)
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
outdegreedist = data.frame(outdegreedist1, model = rep("lognormal", 500))#
outdegreedist = rbind(outdegreedist, data.frame(outdegreedist2, model = rep("exponential", 500)))#
colnames(outdegreedist)[1:18]=1:18#
library(ggplot2)#
library(reshape)#
data = melt(outdegreedist)#
colnames(data) = c("Model","Node", "Outdegree")
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red')
head(data)
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot()
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot() + geom_line(data = outdegree, col = 'red', group = 1)
outdegree = tabulate(email[trim,2], A)
outdegree
outdegreeobs = data.frame(Node = 1:18, Outdegree = outdegree, Model = rep("lognormal", 18))
ggplot(data = data, aes(x = Node, y = Outdegree, fill= Model)) +geom_boxplot() + geom_line(data = outdegreeobs, col = 'red', group = 1)
indegreedist = data.frame(indegreedist1, model = rep("lognormal", 500))#
indegreedist = rbind(indegreedist, data.frame(indegreedist2, model = rep("exponential", 500)))#
colnames(indegreedist)[1:18]=1:18#
data = melt(indegreedist)#
colnames(data) = c("Model","Node", "Indegree")#
#
indegreeobs = data.frame(Node = 1:18, Indegree = indegree, Model = rep("lognormal", 18))#
ggplot(data = data, aes(x = Node, y =Indegree, fill= Model)) +geom_boxplot() + geom_line(data = indegreeobs, col = 'red', group = 1)
recipientsdist = data.frame(recipientsdist1[,1:14], model = rep("lognormal", 500))#
recipientsdist = rbind(recipientsdist, data.frame(indegreedist2[,1:14], model = rep("exponential", 500)))#
colnames(recipientsdist)[1:14]=1:14
data = melt(recipientsdist)#
colnames(data) = c("Model","Node", "RecipientSize")#
#
recipientsobs = data.frame(RecipientSize = 1:14, Documents = recipients[1:14], Model = rep("lognormal", 14))#
ggplot(data = data, aes(x = Node, y =RecipientSize, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
recipientsdist = data.frame(recipientsdist1[,1:14], model = rep("lognormal", 500))#
recipientsdist = rbind(recipientsdist, data.frame(indegreedist2[,1:14], model = rep("exponential", 500)))#
colnames(recipientsdist)[1:14]=1:14#
data = melt(recipientsdist)#
colnames(data) = c("Model","Documents", "RecipientSize")#
#
recipientsobs = data.frame(RecipientSize = 1:14, Documents = recipients[1:14], Model = rep("lognormal", 14))#
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
recipients = tabulate(rowSums(email[trim,3:20]), A-1)
recipientsdist = data.frame(recipientsdist1[,1:14], model = rep("lognormal", 500))#
recipientsdist = rbind(recipientsdist, data.frame(indegreedist2[,1:14], model = rep("exponential", 500)))#
colnames(recipientsdist)[1:14]=1:14#
data = melt(recipientsdist)#
colnames(data) = c("Model","Documents", "RecipientSize")
recipientsobs = data.frame(RecipientSize = 1:14, Documents = recipients[1:14], Model = rep("lognormal", 14))#
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
recipients[1:14]
recipientsobs = data.frame(RecipientSize = 1:14, Documents = recipients[1:14], Model = rep("lognormal", 14))
recipientsobs
head(data)
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot()
recipientsdist = data.frame(recipientsdist1[,1:14], model = rep("lognormal", 500))#
recipientsdist = rbind(recipientsdist, data.frame(indegreedist2[,1:14], model = rep("exponential", 500)))#
colnames(recipientsdist)[1:14]=1:14#
data = melt(recipientsdist)#
colnames(data) = c("Model","RecipientSize","Documents")
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
recipientsdist = data.frame(recipientsdist1[,1:14], model = rep("lognormal", 500))#
recipientsdist = rbind(recipientsdist, data.frame(recipientsdist2[,1:14], model = rep("exponential", 500)))#
colnames(recipientsdist)[1:14]=1:14#
data = melt(recipientsdist)#
colnames(data) = c("Model","RecipientSize","Documents")
ggplot(data = data, aes(x =RecipientSize, y = Documents, fill= Model)) +geom_boxplot() + geom_line(data = recipientsobs, col = 'red', group = 1)
uniqueValues = quantile(c(timedist[,-1], timeinc1), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc1) <= uniqueValues[j])#
}
uniqueValues = quantile(c(timedist1[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist1[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}
time = data.frame(Simulated = qx1, Observed = qx2)
head(time)
dim(time)
time = data.frame(Simulated = qx1, Observed = qx2, Model = rep("lognormal", 500))
uniqueValues = quantile(c(timedist2[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist2[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}
time = rbind(time, data.frame(Simulated = qx1, Observed = qx2, Model = rep("exponential", 500)))
head(time)
tail(time)
ggplot(data = time, aes(x = Simulated, y = Observed, fill = Model)) + geom_point() + geom_abline(intercept = 0, slope = 1, col = 'red')
ggplot(data = time, aes(x = Simulated, y = Observed, colour= Model)) + geom_point() + geom_abline(intercept = 0, slope = 1, col = 'red')
ggplot(data = time, aes(x = Simulated, y = Observed)) + geom_point(colour=Model) + geom_abline(intercept = 0, slope = 1, col = 'red')
ggplot(data = time, aes(x = Simulated, y = Observed, colour = Model)) + geom_point() + geom_abline(intercept = 0, slope = 1, col = 'red')
head(time)
tail(time)
head(timedist1)
head(timedist2)
indegreedist1 = matrix(NA, 500, A)#
outdegreedist1 = matrix(NA,  500, A)#
recipientsdist1 = matrix(NA,  500, A-1)#
timedist1 = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew", n,".RData")#
	load(filename)#
	outdegreedist1[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC[[x]]$a_d, c(1)), A)#
	indegreedist1[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC[[x]]$r_d))#
	recipientsdist1[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC[[x]]$r_d), c(1)), A-1)#
	timedist1[n, ] = vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))/ timeunit#
}
indegreedist2 = matrix(NA, 500, A)#
outdegreedist2 = matrix(NA,  500, A)#
recipientsdist2 = matrix(NA,  500, A-1)#
timedist2 = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC3")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew2", n,".RData")#
	load(filename)#
	outdegreedist2[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC2[[x]]$a_d, c(1)), A)#
	indegreedist2[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC2[[x]]$r_d))#
	recipientsdist2[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC2[[x]]$r_d), c(1)), A-1)#
	timedist2[n, ] = vapply(1:621, function(x) Montgomery_PPC2[[x]]$t_d, c(1))/ timeunit#
}
uniqueValues = quantile(c(timedist1[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist1[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}#
time = data.frame(Simulated = qx1, Observed = qx2, Model = rep("lognormal", 500))#
#
uniqueValues = quantile(c(timedist2[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist2[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}
time = rbind(time, data.frame(Simulated = qx1, Observed = qx2, Model = rep("exponential", 500)))
ggplot(data = time, aes(x = Simulated, y = Observed, colour = Model)) + geom_point() + geom_abline(intercept = 0, slope = 1, col = 'red')
head(time)
timeunit
timeinc = diff(sort(email$timepoints)[43:max(trim)])/3600
head(timeinc)
head(timedist1)
vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))/ timeunit
vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew", n,".RData")#
	load(filename)#
	outdegreedist1[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC[[x]]$a_d, c(1)), A)#
	indegreedist1[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC[[x]]$r_d))#
	recipientsdist1[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC[[x]]$r_d), c(1)), A-1)#
	timedist1[n, ] = vapply(1:621, function(x) Montgomery_PPC[[x]]$t_d, c(1))/ timeunit#
}
head(timedist1)
head(Montgomery_PPC[[1]])
head(Montgomery_PPC[[2]])
email$timepoints
c(Montgomery_PPC[[x]]$t_d -email$timepoints[42], vapply(2:621, function(x) Montgomery_PPC[[x]]$t_d - Montgomery_PPC[[x-1]]$t_d , c(1)))/ timeunit
Montgomery_PPC[[1]]$t_d
email$timepoints[42]
indegreedist1 = matrix(NA, 500, A)#
outdegreedist1 = matrix(NA,  500, A)#
recipientsdist1 = matrix(NA,  500, A-1)#
timedist1 = matrix(NA, 500, 621)#
#setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#setwd("/Users/bomin8319/")#
setwd("/Users/bomin8319/Desktop/MulticastNetwork/Emails/PPC")#
#
for (n in 1:500) {#
	filename = paste0("Montgomery_PPCnew", n,".RData")#
	load(filename)#
	outdegreedist1[n, ] = tabulate(vapply(1:621, function(x) Montgomery_PPC[[x]]$a_d, c(1)), A)#
	indegreedist1[n, ] = rowSums(sapply(1:621, function(x) Montgomery_PPC[[x]]$r_d))#
	recipientsdist1[n, ] = tabulate(vapply(1:621, function(x) sum(Montgomery_PPC[[x]]$r_d), c(1)), A-1)#
	timedist1[n, ] = c(Montgomery_PPC[[1]]$t_d -email$timepoints[42], vapply(2:621, function(x) Montgomery_PPC[[x]]$t_d - Montgomery_PPC[[x-1]]$t_d , c(1)))/ timeunit#
}
uniqueValues = quantile(c(timedist1[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist1[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}#
time = data.frame(Simulated = qx1, Observed = qx2, Model = rep("lognormal", 500))#
#
uniqueValues = quantile(c(timedist2[,-1], timeinc), seq(0, 1, length = 500))#
  qx1 = numeric(length(uniqueValues))#
  	qx2 = numeric(length(uniqueValues))#
  	for (j in 1:length(uniqueValues)) {#
  		qx1[j] = mean(c(timedist2[,-1]) <= uniqueValues[j])#
  		qx2[j] = mean(c(timeinc) <= uniqueValues[j])#
}#
#
time = rbind(time, data.frame(Simulated = qx1, Observed = qx2, Model = rep("exponential", 500)))#
ggplot(data = time, aes(x = Simulated, y = Observed, colour = Model)) + geom_point() + geom_abline(intercept = 0, slope = 1, col = 'red')
ggplot(data = time, aes(x = Simulated, y = Observed, colour = Model)) + geom_point() + geom_abline(intercept = 0, slope = 1)
ggplot(data = time, aes(x = Simulated, y = Observed, colour = Model)) + geom_point() + geom_abline(intercept = 0, slope = 1)
library(MulticastNetwork)#
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
for (d in 1:dim(Y)[1]) {#
	if (missing[[1]][d,1] == 1) {#
		edge[[d]]$a_d = NA#
	}#
	if (sum(missing[[2]][d,]) > 0) {#
		edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA#
	}#
	if (missing[[3]][d,1] == 1) {#
		edge[[d]]$t_d = NA#
	}#
}
load('~/Desktop/MulticastNetwork/Emails/Montgomery_PPE.RData')
load('~/Desktop/Montgomery_PPE2.RData')
library(gridExtra)#
p = list()#
##################
truesender = sapply(Montgomery_PPE$sendermissing, function(d) edge[[d]]$a_d)#
predprob = Montgomery_PPE$senderprob/rowSums(Montgomery_PPE$senderprob)#
predprob2 = Montgomery_PPE2$senderprob/rowSums(Montgomery_PPE2$senderprob)#
#
sender = data.frame(probtrue = sapply(1:62, function(d) predprob[d,truesender[d]]), dist = rep("lognormal", 62))#
sender = rbind(sender, data.frame(probtrue = sapply(1:62, function(d) predprob2[d,truesender[d]]), dist = rep("exponential", 62)))#
library(ggplot2)#
library(reshape)#
sender = melt(sender)#
colnames(sender)[3] = "correct"#
p[[1]]=ggplot(data = sender, aes(x = dist, y = correct, fill = dist))+geom_boxplot()
sender = data.frame(probtrue = sapply(1:62, function(d) predprob[d,truesender[d]]), dist = rep("lognormal", 62))
