mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:100, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:100, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:100, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:100, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:100, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:100, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
GiR = matrix(NA, nrow = 1000, ncol = 8)
i = 1
y <- cbind(rlnorm(1000,0,5),rlnorm(1000,1,5),rlnorm(1000,2,5))
GiR[i, 1:4] = c(0,1,2,5)
vals <- apply(y,1,min)
index <- apply(y,1,which.min)
i
infer = optim(par = rep(1,4),fn=log.lik,val=vals,index=index)
infer
GiR = matrix(NA, nrow = 1000, ncol = 8)
for (i in 1:1000) {
y <- cbind(rlnorm(1000,0,5),rlnorm(1000,1,5),rlnorm(1000,2,5))
GiR[i, 1:4] = c(0,1,2,5)
vals <- apply(y,1,min)
index <- apply(y,1,which.min)
infer = optim(par = rep(1,4),fn=log.lik,val=vals,index=index)
GiR[i,5:8] = infer$par
}
i
plot(GiR[1:231,1], GiR[1:231,5])
plot(GiR[1:231,5])
plot(GiR[1:231,6])
plot(GiR[1:231,7])
plot(GiR[1:231,8])
summary(GiR[1,231:8])
summary(GiR[1:231,8])
GiR = matrix(NA, nrow = 1000, ncol = 8)
for (i in 1:1000) {
y <- cbind(rlnorm(100,0,5),rlnorm(100,10,5),rlnorm(100,20,5))
GiR[i, 1:4] = c(0,1,2,5)
vals <- apply(y,1,min)
index <- apply(y,1,which.min)
infer = optim(par = rep(1,4),fn=log.lik,val=vals,index=index)
GiR[i,5:8] = infer$par
}
summary(GiR[1,231:8])
head(GiR
)
plot(GiR[,5])
plot(GiR[,6])
plot(GiR[,7])
plot(GiR[,8])
GiR = matrix(NA, nrow = 1000, ncol = 8)
for (i in 1:1000) {
y <- cbind(rlnorm(100,0,5),rlnorm(100,0,5),rlnorm(100,0,5))
GiR[i, 1:4] = c(0,0,0,5)
vals <- apply(y,1,min)
index <- apply(y,1,which.min)
infer = optim(par = rep(1,4),fn=log.lik,val=vals,index=index)
GiR[i,5:8] = infer$par
}
plot(GiR[,8])
plot(GiR[,7])
plot(GiR[,6])
plot(GiR[,5])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:3, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
library(LaplacesDeomn)
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:3, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
library(LaplacesDemon)
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(0:3, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(10:30, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(10:30, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(10:30, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
#mean + one covariate --- test of s2
nDocs = 100
s2 = rhalfcauchy(1, 0.1)
node = 4
X = matrix(sample(10:30, nDocs * node, replace = TRUE), nDocs)
eta.true = rnorm(2, 0, 1)
mu = eta.true[1] + X * eta.true[2]
obs = rep(NA, nDocs)
sender = rep(NA, nDocs)
for (d in 1:nDocs) {
times = rlnorm(node, mu[d,], s2)
obs[d] = min(times)
sender[d] = which(times == obs[d])
}
post.old = function(eta.old, obs, sender, s2) {
mu = eta.old[1] + X * eta.old[2]
sum(sapply(1:nDocs, function(d) dlnorm(obs[d], mu[d,sender[d]], s2, log = TRUE) + sum(sapply(c(1:node)[-sender[d]], function(x) plnorm(obs[d], mu[d, x], s2, lower.tail = FALSE, log.p = TRUE)))))
}
s2.grid = seq(0.1, 10, by = 0.01)
y = sapply(s2.grid, function(x) post.old(eta.true, obs, sender, x))
plot(s2.grid, y)
c(s2,s2.grid[which(y==max(y))])
log.lik <- function(par,val,index){
mu <- par[1:3]
sig <- par[4]
ll <- 0
for(i in 1:length(index)){
ll <- ll + dlnorm(val[i],mu[index[i]],sig, log = TRUE) + sum(plnorm(val[i],mu[-index[i]],sig, FALSE, TRUE))
}
-ll
}
y <- cbind(rlnorm(1000,0,5),rlnorm(1000,1,5),rlnorm(1000,2,5))
vals <- apply(y,1,min)
index <- apply(y,1,which.min)
optim(par = rep(1,4),fn=log.lik,val=vals,index=index)
y
library(MulticastNetwork)
library(FastGP)
library(MCMCpack)
library(LaplacesDemon)
set.seed(526113322)
nDocs = 100
node = 1:4
netstat = c("dyadic")
#timestat = c("timeofday", "dayofweek")
timestat = c()
L = 3
P = 6
prior.b = list(rep(0.5, P), 0.5* diag(P))
prior.delta = c(-3, 0.1)
#prior.eta = list(rep(2.5, length(node) + length(timestat)), 0.5*diag(length(node) +length(timestat)))
prior.eta = list(rep(2.5, 1), 0.5*diag(1))
prior.tau =  c(2,1)
sigma.Q = c(0.075, 0.005, 0.25, 0.05)
b = prior.b[[1]]
eta = prior.eta[[1]]
delta = prior.delta[1]
sigma_tau = prior.tau[2]/(prior.tau[1]-1)
support = gibbs.measure.support(length(node)-1)
base.data = GenerateDocs(500, node, b, eta, delta, sigma_tau, support, netstat, timestat,
base.data= NULL, backward = FALSE, base = TRUE)
Outer = 5
Inner = c(10, 10, 10)
Schein <- Schein(5000, nDocs, node, prior.b, prior.delta, prior.eta, prior.tau, sigma.Q, Outer, Inner,
netstat = c("dyadic"), timestat = timestat,
base.data = base.data, generate_PP_plots = TRUE)
library(MulticastNetwork)
library(FastGP)
library(MCMCpack)
library(LaplacesDemon)
set.seed(526113322)
nDocs = 100
node = 1:4
netstat = c("dyadic")
#timestat = c("timeofday", "dayofweek")
timestat = c()
L = 3
P = 6
prior.b = list(rep(0.5, P), 0.5* diag(P))
prior.delta = c(-3, 0.1)
#prior.eta = list(rep(2.5, length(node) + length(timestat)), 0.5*diag(length(node) +length(timestat)))
prior.eta = list(rep(2.5, 1), 0.5*diag(1))
prior.tau =  c(2,1)
sigma.Q = c(0.075, 0.005, 0.25, 0.05)
b = prior.b[[1]]
eta = prior.eta[[1]]
delta = prior.delta[1]
sigma_tau = prior.tau[2]/(prior.tau[1]-1)
support = gibbs.measure.support(length(node)-1)
base.data = GenerateDocs(500, node, b, eta, delta, sigma_tau, support, netstat, timestat,
base.data= NULL, backward = FALSE, base = TRUE)
eta
library(MulticastNetwork)
library(FastGP)
library(MCMCpack)
library(LaplacesDemon)
set.seed(526113322)
nDocs = 100
node = 1:4
netstat = c("dyadic")
#timestat = c("timeofday", "dayofweek")
timestat = c()
L = 3
P = 6
prior.b = list(rep(0.5, P), 0.5* diag(P))
prior.delta = c(-3, 0.1)
#prior.eta = list(rep(2.5, length(node) + length(timestat)), 0.5*diag(length(node) +length(timestat)))
prior.eta = list(rep(2.5, 1), 0.5*diag(1))
prior.tau =  c(2,1)
sigma.Q = c(0.075, 0.005, 0.25, 0.05)
b = prior.b[[1]]
eta = prior.eta[[1]]
delta = prior.delta[1]
sigma_tau = prior.tau[2]/(prior.tau[1]-1)
support = gibbs.measure.support(length(node)-1)
base.data = GenerateDocs(500, node, b, eta, delta, sigma_tau, support, netstat, timestat,
base.data= NULL, backward = FALSE, base = TRUE)
library(MulticastNetwork)
library(FastGP)
library(MCMCpack)
library(LaplacesDemon)
set.seed(526113322)
nDocs = 100
node = 1:4
netstat = c("dyadic")
#timestat = c("timeofday", "dayofweek")
timestat = c()
L = 3
P = 6
prior.b = list(rep(0.5, P), 0.5* diag(P))
prior.delta = c(-3, 0.1)
#prior.eta = list(rep(2.5, length(node) + length(timestat)), 0.5*diag(length(node) +length(timestat)))
prior.eta = list(rep(2.5, 1), 0.5*diag(1))
prior.tau =  c(2,1)
sigma.Q = c(0.075, 0.005, 0.25, 0.05)
b = prior.b[[1]]
eta = prior.eta[[1]]
delta = prior.delta[1]
sigma_tau = prior.tau[2]/(prior.tau[1]-1)
support = gibbs.measure.support(length(node)-1)
base.data = GenerateDocs(500, node, b, eta, delta, sigma_tau, support, netstat, timestat,
base.data= NULL, backward = FALSE, base = TRUE)
library(devtools)
setwd("/Users/bomin8319/Desktop/MulticastNetwork/pkg")
document(
)
install()
library(MulticastNetwork)
library(FastGP)
library(MCMCpack)
library(LaplacesDemon)
set.seed(526113322)
nDocs = 100
node = 1:4
netstat = c("dyadic")
#timestat = c("timeofday", "dayofweek")
timestat = c()
L = 3
P = 6
prior.b = list(rep(0.5, P), 0.5* diag(P))
prior.delta = c(-3, 0.1)
#prior.eta = list(rep(2.5, length(node) + length(timestat)), 0.5*diag(length(node) +length(timestat)))
prior.eta = list(rep(2.5, 1), 0.5*diag(1))
prior.tau =  c(2,1)
sigma.Q = c(0.075, 0.005, 0.25, 0.05)
b = prior.b[[1]]
eta = prior.eta[[1]]
delta = prior.delta[1]
sigma_tau = prior.tau[2]/(prior.tau[1]-1)
support = gibbs.measure.support(length(node)-1)
base.data = GenerateDocs(500, node, b, eta, delta, sigma_tau, support, netstat, timestat,
base.data= NULL, backward = FALSE, base = TRUE)
Outer = 5
Inner = c(10, 10, 10)
Schein <- Schein(1000, nDocs, node, prior.b, prior.delta, prior.eta, prior.tau, sigma.Q, Outer, Inner,
netstat = c("dyadic"), timestat = timestat,
base.data = base.data, generate_PP_plots = TRUE)
par(mfrow = c(4, 4), oma = c(3, 3, 3, 3), mar = c(2, 1, 1,
1))
GiR_PP_Plots(Forward_stats, Backward_stats)
Schein <- Schein(10000, nDocs, node, prior.b, prior.delta, prior.eta, prior.tau, sigma.Q, Outer, Inner,
netstat = c("dyadic"), timestat = timestat,
base.data = base.data, generate_PP_plots = TRUE)
par(mfrow = c(4, 4), oma = c(3, 3, 3, 3), mar = c(2, 1, 1,
1))
GiR_PP_Plots(Forward_stats, Backward_stats)
