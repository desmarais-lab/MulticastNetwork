exp(Timepartindiv(mu[d,], sqrt(sigma2), timeinc[d]))
timeinc
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
which(is.na(data[[d]][[2]]))
missingr = which(is.na(data[[d]][[2]]))
data[[d]][[2]][missingr] = u[[d]][senders[d], missingr]
data[[d]][[2]]
u[[d]][senders[d], missingr]
receiverpredict[iter2, o] = data[[d]][[2]][missingr[it]]#
        	iter2 = iter2+1
it = 1
receiverpredict[iter2, o] = data[[d]][[2]][missingr[it]]#
        	iter2 = iter2+1
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
sum(is.na(receivers))
receiverpredict = matrix(NA, nrow = sum(is.na(receivers)), ncol = outer)
ength(receivermissing)
length(receivermissing)
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
data[[d]][[2]][missingr[it]]
receiverpredict[iter2, o] = data[[d]][[2]][missingr[it]]
iter2
dim(receiverpredidct)
dim(receiverpredict)
receiversample = u[[d]][senders[d], missingr[it]]
receiversample
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
loglike.diff
prior.new0
prior.old0
post.old0
post.new0
prior.new0+post.new0-prior.old0-post.old0
prior.new1+post.new1-prior.old1-post.old1
beta,bew
beta.new
prior.new1
lambda
post.new1
u
data
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
d
receivermissing
which(is.na(data[[d]][[2]]))
data[[d]][[2]]
is.na(data[[d]][[2]])
rowSums(receivers)
receivers
length(data[[2]])
length(data[[2]][[2]])
d =1
vapply(data, function(d) { d[[2]] }, rep(0, A))
data[[2]]
t(vapply(data, function(d) { d[[2]] }, rep(0, A)))
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
receivers
receivers[1,]
data[[1]][[2]]
d = 1
receivermissing = which(is.na(rowSums(receivers)))
which(is.na(data[[d]][[2]]))
Q
document()
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-4, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 50#
inner = c(1, 1, 1)#
burn = 0#
#
#run infernece#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
#
# generate data from the model estimates#
#Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
#                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, timedist = "lognormal")#
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
for (d in 1:dim(Y)[1]) {#
	if (missing[[1]][d,1] == 1) {#
		edge[[d]]$a_d = NA#
	}#
	if (sum(missing[[2]][d,]) > 0) {#
		edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA#
	}#
	if (missing[[3]][d,1] == 1) {#
		edge[[d]]$t_d = NA#
	}#
}#
initial = list()#
initial$beta = colMeans(Montgomery_infer$beta)#
initial$eta =  colMeans(Montgomery_infer$eta)#
initial$u = Montgomery_infer$u#
initial$sigma2 = mean(Montgomery_infer$sigma2)#
#
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
loglike.diff
missingr
data[[d]]
d
receivers[d,]
length(receivers[d,])
length(data[[d]][[2]])
edge[[1]]
data[[d]]
data[[1]]
data[[1]]Q
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-4, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 50#
inner = c(1, 1, 1)#
burn = 0#
#
#run infernece#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
#
# generate data from the model estimates#
#Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
#                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, timedist = "lognormal")#
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
for (d in 1:dim(Y)[1]) {#
	if (missing[[1]][d,1] == 1) {#
		edge[[d]]$a_d = NA#
	}#
	if (sum(missing[[2]][d,]) > 0) {#
		edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA#
	}#
	if (missing[[3]][d,1] == 1) {#
		edge[[d]]$t_d = NA#
	}#
}#
initial = list()#
initial$beta = colMeans(Montgomery_infer$beta)#
initial$eta =  colMeans(Montgomery_infer$eta)#
initial$u = Montgomery_infer$u#
initial$sigma2 = mean(Montgomery_infer$sigma2)#
#
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
data[[1]]
data[1,]
data[[1]]
receivers[1,]
senders
sendermissing
which(is.na(senders))
Q
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-4, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 50#
inner = c(1, 1, 1)#
burn = 0#
#
#run infernece#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
#
# generate data from the model estimates#
#Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
#                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, timedist = "lognormal")#
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
for (d in 1:dim(Y)[1]) {#
	if (missing[[1]][d,1] == 1) {#
		edge[[d]]$a_d = NA#
	}#
	if (sum(missing[[2]][d,]) > 0) {#
		edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA#
	}#
	if (missing[[3]][d,1] == 1) {#
		edge[[d]]$t_d = NA#
	}#
}
edge
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
senders
library(devtools)
document9
document()
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-4, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 50#
inner = c(1, 1, 1)#
burn = 0#
#
#run infernece#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
#
# generate data from the model estimates#
#Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
#                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, timedist = "lognormal")#
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
for (d in 1:dim(Y)[1]) {#
	if (missing[[1]][d,1] == 1) {#
		edge[[d]]$a_d = NA#
	}#
	if (sum(missing[[2]][d,]) > 0) {#
		edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA#
	}#
	if (missing[[3]][d,1] == 1) {#
		edge[[d]]$t_d = NA#
	}#
}#
initial = list()#
initial$beta = colMeans(Montgomery_infer$beta)#
initial$eta =  colMeans(Montgomery_infer$eta)#
initial$u = Montgomery_infer$u#
initial$sigma2 = mean(Montgomery_infer$sigma2)
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
senders
receivermissing
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
loglike
loglike.diff
missingr
d
data
receivers
missingr = which(is.na(receivers[d,]))
missingr
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
rowSums(Montgomery_PPE$senderpob)
rowSums(Montgomery_PPE$senderprob)
Montgomery_PPE$senderprob
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE$senderprob
rowSums(Montgomery_PPE$senderprob)
Montgomery_PPE$senderprob/rowSums(Montgomery_PPE$senderprob)
logit
u_cpp
lambda
document()
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
lambda[[d]][senders[d], missingr[it]]
lambda[[d]]
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
logitprob = exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)#
        		    receiverprob[iter2, receiversample+1] = c(1-logitprob, logitprob)
receiverprob[iter2, ] = c(1-logitprob, logitprob)
receiverprob
Q
document()
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600,
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
Q
rm(list=ls())
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
edge = Montgomery$edge#
X = Montgomery$X#
Y = Montgomery$Y#
P = dim(X)[4]#
Q = dim(Y)[3]#
A = dim(Y)[2]#
#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = c(-4, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 500#
inner = c(1, 1, 1)#
burn = 0#
#
#run infernece#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
#
# generate data from the model estimates#
#Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
#                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, timedist = "lognormal")#
set.seed(1)#
missing = list()#
#missingness of senders#
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)    #
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
#missingness of receivers#
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)    #
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1#
#missingness of timestamps#
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)#
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1#
for (d in 1:dim(Y)[1]) {#
	if (missing[[1]][d,1] == 1) {#
		edge[[d]]$a_d = NA#
	}#
	if (sum(missing[[2]][d,]) > 0) {#
		edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA#
	}#
	if (missing[[3]][d,1] == 1) {#
		edge[[d]]$t_d = NA#
	}#
}#
initial = list()#
initial$beta = colMeans(Montgomery_infer$beta)#
initial$eta =  colMeans(Montgomery_infer$eta)#
initial$u = Montgomery_infer$u#
initial$sigma2 = mean(Montgomery_infer$sigma2)#
#
#will generate 10 predictions (iterate two steps: imputation -> inference)#
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
lambda[[d]]
logitprob
d
d = 2
logitprob = exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
logitprob
lambda[[d]]
senders[d]
lambda[[d]][senders[d], missingr[it]]
receivermissing
d = 621
lambda[[d]][senders[d], missingr[it]]
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
d = 8
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
lambda[[d]][senders[d], missingr[it]]
exp(lambda[[d]][senders[d], missingr[it]])
exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
d = 406
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
lambda[[d]][senders[d], missingr[it]]
exp(lambda[[d]][senders[d], missingr[it]])/exp(lambda[[d]][senders[d], missingr[it]]+1)
lambda[[d]][senders[d], missingr[it]]
it
missingr
exp(lambda[[d]][senders[d], missingr[it]])
exp(lambda[[d]][senders[d], missingr[it]]+1)
exp(lambda[[d]][senders[d], missingr[it]])/(exp(lambda[[d]][senders[d], missingr[it]])+1)
exp(lambda[[d]][senders[d], missingr[it]])/(exp(lambda[[d]][senders[d], missingr[it]])+1)
d = 1
exp(lambda[[d]][senders[d], missingr[it]])/(exp(lambda[[d]][senders[d], missingr[it]])+1)
Q
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
loglike.diff
Q
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
exp(0)/exp(0+1)
exp(0)/(exp(0)+1)
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
sum(data[[d]][[2]][-senders[d]])
data[[d]][[2]][-senders[d]]
d
which(is.na(receivers[d,]))
receivers[d,-senders[d]]
senders[d]
d
sum(receivers[d,- missingr[it]])
receivers[d,- missingr[it]]
ifelse(sum(receivers[d,- missingr[it]])==0, 1, exp(lambda[[d]][senders[d], missingr[it]])/(exp(lambda[[d]][senders[d], missingr[it]])+1))
Q
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
Q
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 0, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
document()
Montgomery_PPE = PPE(edge, X, Y, 10, c(5,5,1), 5, prior.beta, prior.eta, prior.sigma2, #
                     initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, #
                     lasttime = Montgomery$lasttime, MHprop.var = 0.1, timedist = "lognormal")
Montgomery_PPE
document()
check()
install()
