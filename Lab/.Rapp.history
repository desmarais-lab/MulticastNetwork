#install the package from Github#
library(devtools)#
install_github("desmarais-lab/MulticastNetwork/pkg")
library(lubridate)#
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')#
Montgomery = Temporal_Email_Data$Montgomery#
email = Montgomery$email_data#
email = unique(email)#
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))#
email = email[order(email$timepoints), ]#
edge = list()#
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))#
for (d in 1:nrow(email)) {#
	t_d = email[d, 21] - initialtime#
	edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)#
}#
#
uniqtime = unique(email$timepoints)#
# construct time covariates Y#
D = length(edge)#
A = length(Montgomery$manager_gender)#
Q = 7#
Y = array(1, dim = c(D,A,Q))#
for (a in 1:A) {#
	Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")#
	Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")#
}#
timeunit = 3600#
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)#
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)#
for (d in 2:D) {#
	index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])#
	sent = email[index, 2]#
	received = email[index, 3:(2+A)]#
	Y[d, ,4] = tabulate(sent, A) #
	Y[d, ,5] = colSums(received)#
	Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)#
	Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)#
}#
sendraw = function(data, a, r) {#
	sum(data[,2] == a & data[, 2+r]==1)#
}#
#
# construct recipient covariates X#
D = length(edge)#
A = length(Montgomery$manager_gender)#
P = 11#
X = array(0, dim = c(D,A,A,P))#
X[,,,1] = 1#
timeunit = 3600#
for (d in 2:D) {#
	index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])#
	data = email[index, ]#
	sent = data[, 2]#
	received = data[, 3:(2+A)]#
	outdegree = tabulate(sent, A)#
	indegree = colSums(received)#
	for (a in 1:A) {#
		for (r in c(1:A)[-a]) {#
			X[d, a, r, 2] = outdegree[a]  #
			X[d, a, r, 3] = indegree[r]	#
			X[d, a, r, 4] = sendraw(data, a, r)#
			X[d, a, r, 5] = sendraw(data, r, a)#
			X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {#
				sendraw(data, a, h) * sendraw(data, h, r) / 10#
				}))#
			X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {#
				sendraw(data, h, a) * sendraw(data, r, h)#
				})) / 10#
			X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {#
				sendraw(data, h, a) * sendraw(data, h, r)#
				})) / 10#
			X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {#
				sendraw(data, a, h) * sendraw(data, r, h)#
				}))	/10	#
		}#
	  X[d, a, , 10] = ifelse(outdegree[a] > 0, sum(X[d,a,,4]), 0)#
	  X[d, a, , 11] = X[d, a, , 2] * X[d, a, , 10] / 10#
	}#
}
document()
Montgomery = list(edge = edge, X = X, Y = Y, initial = initial)
email[min(trim-1), 21]
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))#
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))#
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])#
edge = edge[trim]#
X = X[trim,,,]#
Y = Y[trim,,]
email[min(trim-1), 21]
initialtime
Montgomery = list(edge = edge, X = X, Y = Y, lasttime = email[min(trim-1), 21])
names(Montgomery)
Montgomery$lasttime
head(Montgomery$edte)
head(Montgomery$edge)
getwd()
save(Montgomery_infer, file = "Montgomery_infer.RData")
save(Montgomery, file = "Montgomery.RData")
#install the package from Github#
library(devtools)#
install_github("desmarais-lab/MulticastNetwork/pkg")#
library(MulticastNetwork)#
#load our Montgomery county email data#
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
names(Montgomery)#
#
#data including sender a_d, reciever vector r_d, timestamp t_d#
edge = Montgomery$edge#
head(edge)
#covariates affecting "who sends to whom"#
X = Montgomery$X#
head(X[100, 1, , ])
Y = Montgomery$Y#
head(Y[100, , ])
P = dim(X)[4]#
Q = dim(Y)[3]
ã…–
P
Q
prior.beta = list(mean = rep(0, P), var = 2*diag(P))#
prior.eta = list(mean = rep(0, Q), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 100#
inner = c(1, 1, 1)#
burn = 0#
#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")
names(Montgomery_infer)
plot(Montgomery_infer$beta[,1])
plot(Montgomery_infer$beta[,1], type = 'l')
head(X[100, 1, , ])
dimnames(Y)
dimnames(Y)[[3]] = c("intercept", "female", "manager", "outdegree", "indegree", "weekend", "pm")
Montgomery = list(edge = edge, X = X, Y = Y, lasttime = email[min(trim-1), 21] - initialtime )
#install the package from Github#
library(devtools)#
install_github("desmarais-lab/MulticastNetwork/pkg")#
library(MulticastNetwork)#
#load our Montgomery county email data#
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
names(Montgomery)#
#
#data including sender a_d, reciever vector r_d, timestamp t_d#
edge = Montgomery$edge#
head(edge)#
#
#covariates affecting "who sends to whom"#
X = Montgomery$X#
head(X[100, 1, , ])#
X = X[,,,c(1:5)]    #use few covariates for this application#
#
#covariates affecting "when to send"#
Y = Montgomery$Y#
head(Y[100, , ])#
Y = Y[,,c(1:5)]    #use few covariates for this application#
P = dim(X)[4]#
Q = dim(Y)[3]#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = rep(0, P), var = 2*diag(P))#
prior.eta = list(mean = rep(0, Q), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 100#
inner = c(1, 1, 1)#
burn = 0#
#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
names(Montgomery_infer)
Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, #
        			 lasttime = Montgomery$lasttime, timedist = "lognormal")
Montgomery_PPC
Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, #
        			 lasttime = Montgomery$lasttime, timedist = "exponential")
Montgomery_PPC
rexp
?rexp
summary(rexp(1000, 0.1))
summary(rexp(1000, 0.01))
load('~/Desktop/Montgomery_infer.RData')
colMeans(Montgomery_infer$beta)
colMeans(Montgomery_infer$eta)
mean(Montgomery_infer$sigma2)
initialval = list()#
initialval$beta = c(-3.548488159, -0.108898033,  0.086928281,  0.274102964,  0.029273815)#
initialval$eta = c(7.38197540,  0.12883606, -1.07065227, -0.20698218, -0.05894448)#
initialval$sigma2 = 14.09288#
#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = initialval,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")
Inference
initialval = list()#
initialval$beta = c(-3.548488159, -0.108898033,  0.086928281,  0.274102964,  0.029273815)#
initialval$eta = c(7.38197540,  0.12883606, -1.07065227, -0.20698218, -0.05894448)#
initialval$sigma2 = 14.09288#
initialval$u = lapply(1:dim(X)[1], function(d) matrix(0, dim(X)[2], dim(X)[2]))#
#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = initialval,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")
plot(Montgomery_infer$beta[,1], type = 'l')
plot(Montgomery_infer$eta[,1], type = 'l')
plot(Montgomery_infer$eta[,2], type = 'l')
plot(Montgomery_infer$sigma2, type = 'l')
#install the package from Github#
library(devtools)#
install_github("desmarais-lab/MulticastNetwork/pkg")#
library(MulticastNetwork)#
#load our Montgomery county email data#
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
names(Montgomery)#
#
#data including sender a_d, reciever vector r_d, timestamp t_d#
edge = Montgomery$edge#
head(edge)#
#
#covariates affecting "who sends to whom"#
X = Montgomery$X#
head(X[100, 1, , ])#
X = X[,,,c(1:5)]    #use few covariates for this application#
#
#covariates affecting "when to send"#
Y = Montgomery$Y#
head(Y[100, , ])#
Y = Y[,,c(1:5)]    #use few covariates for this application#
P = dim(X)[4]#
Q = dim(Y)[3]#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = rep(0, P), var = 2*diag(P))#
prior.eta = list(mean = rep(0, Q), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 500#
inner = c(1, 1, 1)#
burn = 0#
#
#this initial values are my results after convergence#
initialval = list()#
initialval$beta = c(-3.548488159, -0.108898033,  0.086928281,  0.274102964,  0.029273815)#
initialval$eta = c(7.38197540,  0.12883606, -1.07065227, -0.20698218, -0.05894448)#
initialval$sigma2 = 14.09288#
initialval$u = lapply(1:dim(X)[1], function(d) matrix(0, dim(X)[2], dim(X)[2]))#
#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = initialval,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
names(Montgomery_infer)#
#
# check convergence#
plot(Montgomery_infer$eta[,2], type = 'l')
Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, #
        			 lasttime = Montgomery$lasttime, timedist = "lognormal")
Montgomery_PPC
edge[[621]]
#install the package from Github#
library(devtools)#
install_github("desmarais-lab/MulticastNetwork/pkg")#
library(MulticastNetwork)#
#load our Montgomery county email data#
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")#
names(Montgomery)#
#
#data including sender a_d, reciever vector r_d, timestamp t_d#
edge = Montgomery$edge#
head(edge)#
#
#covariates affecting "who sends to whom"#
X = Montgomery$X#
head(X[100, 1, , ])#
X = X[,,,c(1:5)]    #use few covariates for this application#
#
#covariates affecting "when to send"#
Y = Montgomery$Y#
head(Y[100, , ])#
Y = Y[,,c(1:5)]    #use few covariates for this application#
P = dim(X)[4]#
Q = dim(Y)[3]#
#run inference to estimate beta, eta, u, and sigma2#
prior.beta = list(mean = rep(0, P), var = 2*diag(P))#
prior.eta = list(mean = rep(0, Q), var = 2*diag(Q))#
prior.sigma2 = list(a = 2, b = 1)#
#
outer = 500#
inner = c(1, 1, 1)#
burn = 0
#this initial values are my results after convergence#
initialval = list()#
initialval$beta = c(-3.548488159, -0.108898033,  0.086928281,  0.274102964,  0.029273815)#
initialval$eta = c(7.38197540,  0.12883606, -1.07065227, -0.20698218, -0.05894448)#
initialval$sigma2 = 14.09288#
initialval$u = lapply(1:dim(X)[1], function(d) matrix(0, dim(X)[2], dim(X)[2]))#
#
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = initialval,#
		  proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")#
names(Montgomery_infer)
plot(Montgomery_infer$eta[,1], type = 'l')
plot(Montgomery_infer$loglike, type = 'l')
Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, #
        			 lasttime = Montgomery$lasttime, timedist = "lognormal")
# generate data from the model estimates#
Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta), #
                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, #
        			 lasttime = Montgomery$lasttime, timedist = "lognormal")
Montgomery_PPC
