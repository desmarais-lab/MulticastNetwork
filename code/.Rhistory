Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
browser()
Y[d,,8] =
Y[d,,9] =
}
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 9
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
d
d = 1
d = 2
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
sent
index
tabulate(sent, A)
email[index,2]
email[index,]
vapply(1:A, function(a) {sum(received[sent==a,])} ,c(1))
sent
received
a
vapply(1:A, function(a) {ifelse(Y[d,a,4]>0, sum(received[sent==a,]), 0)} ,c(1))
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 9
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
Y[d,,8] = vapply(1:A, function(a) {ifelse(Y[d,a,4]>0, sum(received[sent==a,]), 0)} ,c(1))
Y[d,,9] = Y[d, ,4] * Y[d,,8]
}
Y[1,,,]
Y[1,,]
vapply(1:A, function(a) {ifelse(Y[d,a,4]>0, sum(received[sent==a,]), 0)} ,c(1))
Y[d,,]
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 9
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
Y[d,,8] = vapply(1:A, function(a) {ifelse(Y[d,a,4]>0, sum(received[sent==a,]), 0)} ,c(1))
Y[d,,9] = Y[d, ,4] * Y[d,,8] / 10
}
Y[d,,]
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 9
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
}
}
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
edge = edge[trim]
X = X[trim,,,]
Y = Y[trim,,]
Montgomery_infer = Inference(edge, X, Y, 55000, c(5,1,1), 15000, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 9
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
Y[d,,8] = vapply(1:A, function(a) {ifelse(Y[d,a,4]>0, sum(received[sent==a,]), 0)} ,c(1))
Y[d,,9] = Y[d, ,4] * Y[d,,8] / 10
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 9
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
}
}
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
edge = edge[trim]
X = X[trim,,,]
Y = Y[trim,,]
Montgomery_infer = Inference(edge, X, Y, 55000, c(5,1,1), 15000, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
names(Montgomery_infer)
plot(Montgomery_infer$loglike, type = 'l')
plot(Montgomery_infer$sigma2, type = 'l')
plot(Montgomery_infer$eta[1,], type = 'l')
plot(Montgomery_infer$eta[,1], type = 'l')
plot(Montgomery_infer$eta[,2], type = 'l')
plot(Montgomery_infer$eta[,3], type = 'l')
plot(Montgomery_infer$eta[,4], type = 'l')
plot(Montgomery_infer$eta[,5], type = 'l')
plot(Montgomery_infer$eta[,6], type = 'l')
plot(Montgomery_infer$eta[,7], type = 'l')
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 7
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 11
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
browser()
X[d, a, r, 10] = vapply(1:A, function(a) {ifelse(Y[d,a,4]>0, sum(received[sent==a,]), 0)} ,c(1))
X[d, a, r, 11] = X[d, a, r, 2] * X[d, a, r, 10] / 10
}
}
}
X[d,a,r,]
X[d,a,r,2]
X[d,a,,2]
X[d,a,,]
X[d,a,,4]
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 11
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
X[d, a, r, 10] = ifelse(outdegree[a] > 0, sum(X[d,a,,4]), 0)
X[d, a, r, 11] = X[d, a, r, 2] * X[d, a, r, 10] / 10
}
}
}
X[1,1,,]
X[100,1,,]
D = length(edge)
A = length(Montgomery$manager_gender)
P = 11
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
X[d, a, , 10] = ifelse(outdegree[a] > 0, sum(X[d,a,,4]), 0)
X[d, a, , 11] = X[d, a, , 2] * X[d, a, , 10] / 10
}
}
X[100,1,]
X[100,1,,]
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
edge = edge[trim]
X = X[trim,,,]
Y = Y[trim,,]
Montgomery_infer = Inference(edge, X, Y, 55000, c(5,1,1), 15000, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
names(Montgomery_infer)
plot(Montgomery_infer$loglike, type = 'l')
plot(Montgomery_infer$beta[,1], type = 'l')
plot(Montgomery_infer$eta[,1], type = 'l')
plot(Montgomery_infer$eta[,2], type = 'l')
plot(Montgomery_infer$eta[,3], type = 'l')
plot(Montgomery_infer$eta[,4], type = 'l')
plot(Montgomery_infer$eta[,5], type = 'l')
plot(Montgomery_infer$eta[,6], type = 'l')
plot(Montgomery_infer$eta[,7], type = 'l')
plot(Montgomery_infer$beta[,1], type = 'l')
plot(Montgomery_infer$beta[,2], type = 'l')
plot(Montgomery_infer$beta[,3], type = 'l')
plot(Montgomery_infer$beta[,4], type = 'l')
plot(Montgomery_infer$beta[,5], type = 'l')
plot(Montgomery_infer$beta[,6], type = 'l')
plot(Montgomery_infer$beta[,7], type = 'l')
plot(Montgomery_infer$beta[,8], type = 'l')
plot(Montgomery_infer$beta[,9], type = 'l')
plot(Montgomery_infer$beta[,10], type = 'l')
plot(Montgomery_infer$beta[,11], type = 'l')
Montgomery_infer = Inference(edge, X, Y, 55000, c(10,1,1), 15000, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.0001, 0.002, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
plot(Montgomery_infer$beta[,10], type = 'l')
plot(Montgomery_infer$beta[,1], type = 'l')
plot(Montgomery_infer$beta[,2], type = 'l')
plot(Montgomery_infer$beta[,3], type = 'l')
plot(Montgomery_infer$beta[,4], type = 'l')
plot(Montgomery_infer$beta[,5], type = 'l')
plot(Montgomery_infer$eta[,5], type = 'l')
plot(Montgomery_infer$eta[,1], type = 'l')
plot(Montgomery_infer$eta[,2], type = 'l')
plot(Montgomery_infer$eta[,3], type = 'l')
plot(Montgomery_infer$eta[,4], type = 'l')
plot(Montgomery_infer$eta[,6], type = 'l')
plot(Montgomery_infer$eta[,7], type = 'l')
plot(Montgomery_infer$sigma2, type = 'l')
plot(Montgomery_infer$loglike, type = 'l')
plot(Montgomery_infer$beta[,1], type = 'l')
plot(Montgomery_infer$beta[,10], type = 'l')
plot(Montgomery_infer$beta[,12], type = 'l')
plot(Montgomery_infer$beta[,11], type = 'l')
plot(Montgomery_infer$beta[,8], type = 'l')
Montgomery_infer = Inference(edge, X, Y, 550, c(10,1,1), 150, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.00005, 0.002, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
plot(Montgomery_infer$beta[,8], type = 'l')
plot(Montgomery_infer$eta[,7], type = 'l')
plot(Montgomery_infer$beta[,5], type = 'l')
Montgomery_infer = Inference(edge, X, Y, 550, c(10,1,1), 150, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.00001, 0.002, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
plot(Montgomery_infer$beta[,5], type = 'l')
plot(Montgomery_infer$beta[,8], type = 'l')
plot(Montgomery_infer$beta[,11], type = 'l')
plot(Montgomery_infer$sigma2, type = 'l')
plot(Montgomery_infer$eta[,7], type = 'l')
Montgomery_infer = Inference(edge, X, Y, 55000, c(10,1,1), 15000, prior.beta, prior.eta, prior.sigma2, initial = NULL,
proposal.var = c(0.00001, 0.002, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime)
