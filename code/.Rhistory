t_d
as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01"))
time
P = length(beta)
Q = length(eta)
X = X
Y = Y
u = u
data = list()
t_d = lasttime
lambda = list()
mu = matrix(NA, D, A)
sender = initial$sender
receiver = initial$receiver
time = as.numeric(as.POSIXct(strptime(initial$time, "%d %b %Y %H:%M:%S")))
time
t_d
time
P = length(beta)
Q = length(eta)
X = X
Y = Y
u = u
data = list()
t_d = lasttime
lambda = list()
mu = matrix(NA, D, A)
sender = initial$sender
receiver = initial$receiver
time = as.numeric(as.POSIXct(strptime(initial$time, "%d %b %Y %H:%M:%S")))
d
d = 1
index = which(time >= t_d-3*24*timeunit & time <= t_d)
sent = sender[index]
received = receiver[index, ]
outdegree = tabulate(sent, A)
indegree = colSums(received)
Y[d,,4] = outdegree
Y[d,,5] = indegree
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01")) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01"))), A)
rep(as.numeric(pm(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01"))), A)
for (a in 1:A) {
for (r in 1:A) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
})) / 10
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, r, h)
}))	/10
}
}
send = function(sender, receiver, a, r) {
D = length(sender)
sums = 0
for (d in 1:D) {
sums = sums + as.numeric(sender[d] == a & receiver[d, r]==1)
}
return(sums)
}
for (a in 1:A) {
for (r in 1:A) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
})) / 10
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, r, h)
}))	/10
}
}
sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, r, h)
}))	/10
sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, h, r)
})) / 10
sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, r, h)
})) / 10
sapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
})
vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
}), rep(0, A-1)
vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
}, rep(0, A-2))
a
r
vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
}, rep(0, A-2))
rep(0, A-2)
A-2
vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
}, rep(0, A-2))
vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
}, c(1))
for (a in 1:A) {
for (r in 1:A) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
X[d, a, r, 6] = sum(vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, h, r)
}, c(1))) / 10
X[d, a, r, 7] = sum(vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, r, h)
}, c(1))) / 10
X[d, a, r, 8] = sum(vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, h, a) * send(sent, received, h, r)
}, c(1))) / 10
X[d, a, r, 9] = sum(vapply(c(1:A)[-c(a,r)], function(h) {
send(sent, received, a, h) * send(sent, received, r, h)
}, c(1)))	/10
}
}
atoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, a, h)}, c(1))
htoa = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, a)}, c(1))
rtoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, r, h)}, c(1))
htor = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, r)}, c(1))
atoh
htoa
rtoh
htor
sum(atoh * htor)
for (a in 1:A) {
for (r in 1:A) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
atoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, a, h)}, c(1))
htoa = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, a)}, c(1))
rtoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, r, h)}, c(1))
htor = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, r)}, c(1))
X[d, a, r, 6] = sum(atoh * htor) / 10
X[d, a, r, 7] = sum(htoa * rtoh) / 10
X[d, a, r, 8] = sum(htoa * htor) / 10
X[d, a, r, 9] = sum(atoh * rtoh)	/10
}
}
c(1:A)[-c(a,r)]
X[1,1,1,]
D = length(edge)
A = length(Montgomery$manager_gender)
P = 9
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
X[1,,,]
X[1,,,1]
X[1,,,2]
X[100,2,2,]
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
atoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, a, h)}, c(1))
htoa = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, a)}, c(1))
rtoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, r, h)}, c(1))
htor = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, r)}, c(1))
X[d, a, r, 6] = sum(atoh * htor) / 10
X[d, a, r, 7] = sum(htoa * rtoh) / 10
X[d, a, r, 8] = sum(htoa * htor) / 10
X[d, a, r, 9] = sum(atoh * rtoh) / 10
}
}
lambda[[d]] = lambda_cpp(X[d,,,], beta)
u[[d]] = u_cpp_d(lambda[[d]], u[[d]])
mu[d, ] = mu_cpp_d(Y[d,,], eta)
tau = rlnorm(A, mu[d, ], sqrt(sigma2))
a_d = which(tau == min(tau))
r_d = u[[d]][a_d,]
t_d = t_d + min(tau) * timeunit
data[[d]] = list(a_d = a_d, r_d = r_d, t_d = t_d)
sender = c(sender, a_d)
receiver = rbind(receiver, r_d)
time = c(time, t_d)
lambda[[d]]
u[[d]]
mu[d,]
Y[d,,]
eta
mu_cpp_d(Y[d,,], eta)
dim(Y)
dim(Y[d,,])
sourceCpp('/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast_rcpp.cpp')
mu_cpp_d(Y[d,,], eta)
eta
length(eta)
sourceCpp('/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast_rcpp.cpp')
mu_cpp_d(Y[d,,], eta)
mu[d, ] = mu_cpp_d(Y[d,,], eta)
tau = rlnorm(A, mu[d, ], sqrt(sigma2))
tau
min(tau)
a_d = which(tau == min(tau))
r_d = u[[d]][a_d,]
t_d = t_d + min(tau) * timeunit
data[[d]] = list(a_d = a_d, r_d = r_d, t_d = t_d)
sender = c(sender, a_d)
receiver = rbind(receiver, r_d)
time = c(time, t_d)
tmie
time
t_d
min(tau)
timeunit
t_d
t_d = lasttime
t_d
P = length(beta)
Q = length(eta)
X = X
Y = Y
u = u
data = list()
t_d = lasttime
lambda = list()
mu = matrix(NA, D, A)
sender = initial$sender
receiver = initial$receiver
time = as.numeric(as.POSIXct(strptime(initial$time, "%d %b %Y %H:%M:%S")))
for (d in 1:D) {
index = which(time >= t_d-3*24*timeunit & time <= t_d)
sent = sender[index]
received = receiver[index, ]
outdegree = tabulate(sent, A)
indegree = colSums(received)
Y[d,,4] = outdegree
Y[d,,5] = indegree
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01")) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01"))), A)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
atoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, a, h)}, c(1))
htoa = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, a)}, c(1))
rtoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, r, h)}, c(1))
htor = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, r)}, c(1))
X[d, a, r, 6] = sum(atoh * htor) / 10
X[d, a, r, 7] = sum(htoa * rtoh) / 10
X[d, a, r, 8] = sum(htoa * htor) / 10
X[d, a, r, 9] = sum(atoh * rtoh) / 10
}
}
lambda[[d]] = lambda_cpp(X[d,,,], beta)
u[[d]] = u_cpp_d(lambda[[d]], u[[d]])
mu[d, ] = mu_cpp_d(Y[d,,], eta)
tau = rlnorm(A, mu[d, ], sqrt(sigma2))
a_d = which(tau == min(tau))
r_d = u[[d]][a_d,]
t_d = t_d + min(tau) * timeunit
data[[d]] = list(a_d = a_d, r_d = r_d, t_d = t_d)
sender = c(sender, a_d)
receiver = rbind(receiver, r_d)
time = c(time, t_d)
}
d
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 7
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= email$timepoints[d-1]-3*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
send = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 9
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= email$timepoints[d-1]-3*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(data, a, r)
X[d, a, r, 5] = sum(email[index,2] == r & email[index, 2+a]==1)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(data, a, h) * send(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(data, h, a) * send(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(data, h, a) * send(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
send(data, a, h) * send(data, r, h)
}))	/10
}
}
}
source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 7
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= email$timepoints[d-1]-3*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 9
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= email$timepoints[d-1]-3*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
}
}
prior.beta = list(mean = c(-3, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(5, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=3*24*timeunit+email$timepoints[1])
edge = edge[trim]
X = X[trim,,,]
Y = Y[trim,,]
initial = list()
initial$sender = email[1:21, 2]
initial$receiver = email[1:21, 3:20]
initial$time = email[1:21,1]
Montgomery_PPC = PPC(length(edge), A, colMeans(Montgomery_infer$beta), colMeans(Montgomery_infer$eta), mean(Montgomery_infer$sigma2),
X, Y, timeunit = 3600, lasttime = email[min(trim-1), 21], Montgomery_infer$u, initial =initial)
PPC = function(D, A, beta, eta, sigma2, X, Y, timeunit = 3600, lasttime, u, initial = NULL) {
P = length(beta)
Q = length(eta)
X = X
Y = Y
u = u
data = list()
t_d = lasttime
lambda = list()
mu = matrix(NA, D, A)
sender = initial$sender
receiver = initial$receiver
time = as.numeric(as.POSIXct(strptime(initial$time, "%d %b %Y %H:%M:%S")))
for (d in 1:D) {
if (d %% 10 == 0) print(d)
index = which(time >= t_d-3*24*timeunit & time <= t_d)
sent = sender[index]
received = receiver[index, ]
outdegree = tabulate(sent, A)
indegree = colSums(received)
Y[d,,4] = outdegree
Y[d,,5] = indegree
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01")) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(t_d, tz = getOption("tz"), origin = "1970-01-01"))), A)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = send(sent, received, a, r)
X[d, a, r, 5] = send(sent, received, r, a)
atoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, a, h)}, c(1))
htoa = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, a)}, c(1))
rtoh = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, r, h)}, c(1))
htor = vapply(c(1:A)[-c(a,r)], function(h) {send(sent, received, h, r)}, c(1))
X[d, a, r, 6] = sum(atoh * htor) / 10
X[d, a, r, 7] = sum(htoa * rtoh) / 10
X[d, a, r, 8] = sum(htoa * htor) / 10
X[d, a, r, 9] = sum(atoh * rtoh) / 10
}
}
lambda[[d]] = lambda_cpp(X[d,,,], beta)
u[[d]] = u_cpp_d(lambda[[d]], u[[d]])
mu[d, ] = mu_cpp_d(Y[d,,], eta)
tau = rlnorm(A, mu[d, ], sqrt(sigma2))
a_d = which(tau == min(tau))
r_d = u[[d]][a_d,]
t_d = t_d + min(tau) * timeunit
data[[d]] = list(a_d = a_d, r_d = r_d, t_d = t_d)
sender = c(sender, a_d)
receiver = rbind(receiver, r_d)
time = c(time, t_d)
}
return(data)
}
initial = list()
initial$sender = email[1:21, 2]
initial$receiver = email[1:21, 3:20]
initial$time = email[1:21,1]
Montgomery_PPC = PPC(length(edge), A, colMeans(Montgomery_infer$beta), colMeans(Montgomery_infer$eta), mean(Montgomery_infer$sigma2),
X, Y, timeunit = 3600, lasttime = email[min(trim-1), 21], Montgomery_infer$u, initial =initial)
PPC
Montgomery_PPC
save(Montgomery_PPC, file = "Montgomery_PPC.RData")
